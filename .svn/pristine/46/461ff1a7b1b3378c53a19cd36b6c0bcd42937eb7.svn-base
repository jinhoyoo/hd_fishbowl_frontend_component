{"version":3,"file":"static/js/3186.4750bebf.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/ToastFade.js","../node_modules/react-bootstrap/esm/ToastContext.js","../node_modules/react-bootstrap/esm/ToastHeader.js","../node_modules/react-bootstrap/esm/ToastBody.js","../node_modules/react-bootstrap/esm/Toast.js","../node_modules/react-bootstrap/esm/ToastContainer.js","pages/uikit/Notifications.tsx","../node_modules/react-bootstrap/esm/CloseButton.js"],"sourcesContent":["import * as React from 'react';\nimport { ENTERING, EXITING } from 'react-transition-group/Transition';\nimport Fade from './Fade';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst fadeStyles = {\n  [ENTERING]: 'showing',\n  [EXITING]: 'showing show'\n};\nconst ToastFade = /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/_jsx(Fade, { ...props,\n  ref: ref,\n  transitionClasses: fadeStyles\n}));\nToastFade.displayName = 'ToastFade';\nexport default ToastFade;","import * as React from 'react';\nconst ToastContext = /*#__PURE__*/React.createContext({\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onClose() {}\n\n});\nexport default ToastContext;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CloseButton from './CloseButton';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultProps = {\n  closeLabel: 'Close',\n  closeButton: true\n};\nconst ToastHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  closeLabel,\n  closeVariant,\n  closeButton,\n  className,\n  children,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast-header');\n  const context = useContext(ToastContext);\n  const handleClick = useEventCallback(e => {\n    context == null ? void 0 : context.onClose == null ? void 0 : context.onClose(e);\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    ref: ref,\n    ...props,\n    className: classNames(bsPrefix, className),\n    children: [children, closeButton && /*#__PURE__*/_jsx(CloseButton, {\n      \"aria-label\": closeLabel,\n      variant: closeVariant,\n      onClick: handleClick,\n      \"data-dismiss\": \"toast\"\n    })]\n  });\n});\nToastHeader.displayName = 'ToastHeader';\nToastHeader.defaultProps = defaultProps;\nexport default ToastHeader;","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('toast-body');","import * as React from 'react';\nimport { useEffect, useMemo, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ToastFade from './ToastFade';\nimport ToastHeader from './ToastHeader';\nimport ToastBody from './ToastBody';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Toast = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  transition: Transition = ToastFade,\n  show = true,\n  animation = true,\n  delay = 5000,\n  autohide = false,\n  onClose,\n  bg,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast'); // We use refs for these, because we don't want to restart the autohide\n  // timer in case these values change.\n\n  const delayRef = useRef(delay);\n  const onCloseRef = useRef(onClose);\n  useEffect(() => {\n    delayRef.current = delay;\n    onCloseRef.current = onClose;\n  }, [delay, onClose]);\n  const autohideTimeout = useTimeout();\n  const autohideToast = !!(autohide && show);\n  const autohideFunc = useCallback(() => {\n    if (autohideToast) {\n      onCloseRef.current == null ? void 0 : onCloseRef.current();\n    }\n  }, [autohideToast]);\n  useEffect(() => {\n    // Only reset timer if show or autohide changes.\n    autohideTimeout.set(autohideFunc, delayRef.current);\n  }, [autohideTimeout, autohideFunc]);\n  const toastContext = useMemo(() => ({\n    onClose\n  }), [onClose]);\n  const hasAnimation = !!(Transition && animation);\n\n  const toast = /*#__PURE__*/_jsx(\"div\", { ...props,\n    ref: ref,\n    className: classNames(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide')),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  });\n\n  return /*#__PURE__*/_jsx(ToastContext.Provider, {\n    value: toastContext,\n    children: hasAnimation && Transition ? /*#__PURE__*/_jsx(Transition, {\n      in: show,\n      unmountOnExit: true,\n      children: toast\n    }) : toast\n  });\n});\nToast.displayName = 'Toast';\nexport default Object.assign(Toast, {\n  Body: ToastBody,\n  Header: ToastHeader\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst positionClasses = {\n  'top-start': 'top-0 start-0',\n  'top-center': 'top-0 start-50 translate-middle-x',\n  'top-end': 'top-0 end-0',\n  'middle-start': 'top-50 start-0 translate-middle-y',\n  'middle-center': 'top-50 start-50 translate-middle',\n  'middle-end': 'top-50 end-0 translate-middle-y',\n  'bottom-start': 'bottom-0 start-0',\n  'bottom-center': 'bottom-0 start-50 translate-middle-x',\n  'bottom-end': 'bottom-0 end-0'\n};\nconst ToastContainer = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  position,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast-container');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(bsPrefix, position && `position-absolute ${positionClasses[position]}`, className)\n  });\n});\nToastContainer.displayName = 'ToastContainer';\nexport default ToastContainer;","import React, { useState } from 'react';\nimport { Row, Col, Card, Toast, ToastContainer, Form, Button, ToastContainerProps } from 'react-bootstrap';\nimport { useToggle } from 'hooks';\nimport { PageTitle } from 'components';\nimport logo from 'assets/images/logo_sm_dark.png';\n\ntype Stack = {\n    time: string;\n    desc: string;\n};\n\nconst DefaultToasts = () => {\n    const [isOpen, , , hide] = useToggle(true);\n    const [isOpenTranslucent, , , hideTranslucent] = useToggle(true);\n    const [isOpenPlacement, , , hidePlacement] = useToggle(true);\n\n    const [stacked, setStacked] = useState<Stack[]>([\n        {\n            time: 'just now',\n            desc: 'See? Just like this.',\n        },\n        {\n            time: '2 seconds ago',\n            desc: 'Heads up, toasts will stack automatically',\n        },\n    ]);\n\n    /*\n     * handle close\n     */\n    const handleClose = (index: number) => {\n        const list = [...stacked];\n        list.splice(index, 1);\n        setStacked(list);\n    };\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Bootstrap Toasts</h4>\n                <p className=\"text-muted font-14\">\n                    Push notifications to your visitors with a toast, a lightweight and easily customizable alert\n                    message.\n                </p>\n\n                <Row>\n                    <Col md={6}>\n                        <h5 className=\"mb-2\">Basic</h5>\n                        <p className=\"text-muted font-14\">\n                            Toasts are as flexible as you need and have very little required markup. At a minimum, we\n                            require a single element to contain your “toasted” content and strongly encourage a dismiss\n                            button.\n                        </p>\n                        <div className=\"p-3\">\n                            <Toast onClose={hide} show={isOpen} autohide>\n                                <Toast.Header>\n                                    <img src={logo} alt=\"brand-logo\" height=\"12\" className=\"me-1\" />\n                                    <strong className=\"me-auto\">Hyper</strong>\n                                    <small className=\"ms-5\">11 mins ago</small>\n                                </Toast.Header>\n                                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n                            </Toast>\n                        </div>\n                    </Col>\n\n                    <Col md={6}>\n                        <h5 className=\"mb-2\">Translucent</h5>\n                        <p className=\"text-muted font-14\">\n                            Toasts are slightly translucent, too, so they blend over whatever they might appear over.\n                            For browsers that support the backdrop-filter CSS property, we’ll also attempt to blur the\n                            elements under a toast.\n                        </p>\n\n                        <div className=\"p-3 bg-light\">\n                            <Toast onClose={hideTranslucent} show={isOpenTranslucent} delay={8000} autohide>\n                                <Toast.Header>\n                                    <img src={logo} alt=\"brand-logo\" height=\"12\" className=\"me-1\" />\n                                    <strong className=\"me-auto\">Hyper</strong>\n                                    <small className=\"ms-5\">11 mins ago</small>\n                                </Toast.Header>\n                                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n                            </Toast>\n                        </div>\n                    </Col>\n                </Row>\n\n                {/* stacked */}\n                <Row>\n                    <Col md={6} className=\"mt-4\">\n                        <h5 className=\"mb-2\">Stacking</h5>\n                        <p className=\"text-muted font-14\">\n                            When you have multiple toasts, we default to vertiaclly stacking them in a readable manner.\n                        </p>\n                        <div className=\"p-3\">\n                            <div\n                                aria-live=\"polite\"\n                                aria-atomic=\"true\"\n                                style={{ position: 'relative', minHeight: '200px' }}\n                            >\n                                <div className=\"toast-container\" style={{ position: 'absolute', top: 0, right: 0 }}>\n                                    {stacked.map((item, index) => {\n                                        return (\n                                            <Toast\n                                                key={index.toString()}\n                                                onClose={() => handleClose(index)}\n                                                delay={5000}\n                                                autohide\n                                            >\n                                                <Toast.Header>\n                                                    <img src={logo} alt=\"brand-logo\" height=\"12\" className=\"me-1\" />\n                                                    <strong className=\"me-auto\">Hyper</strong>\n                                                    <small className=\"ms-5\">{item.time}</small>\n                                                </Toast.Header>\n                                                <Toast.Body>{item.desc}</Toast.Body>\n                                            </Toast>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    </Col>\n\n                    <Col md={6} className=\"mt-4\">\n                        <h5 className=\"mb-2\">Placement</h5>\n                        <p className=\"text-muted font-14\">\n                            Place toasts with custom CSS as you need them. The top right is often used for\n                            notifications, as is the top middle. If you’re only ever going to show one toast at a time,\n                            put the positioning styles right on the <code>.toast</code>.\n                        </p>\n\n                        <div className=\"p-3\">\n                            <div\n                                aria-live=\"polite\"\n                                aria-atomic=\"true\"\n                                className=\"d-flex justify-content-center align-items-center\"\n                                style={{ minHeight: '200px' }}\n                            >\n                                <Toast onClose={hidePlacement} show={isOpenPlacement} delay={6000} autohide>\n                                    <Toast.Header>\n                                        <img src={logo} alt=\"brand-logo\" height=\"12\" className=\"me-1\" />\n                                        <strong className=\"me-auto\">Hyper</strong>\n                                        <small className=\"ms-5\">1 mins ago</small>\n                                    </Toast.Header>\n                                    <Toast.Body>Heads up, toasts will stack automatically</Toast.Body>\n                                </Toast>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst CustomToast = () => {\n    const [isOpenCustom1, , , hideCustom1] = useToggle(true);\n    const [isOpenCustom2, , , hideCustom2] = useToggle(true);\n    const [isOpenCustom3, , , hideCustom3] = useToggle(true);\n    const [isOpenCustom4, , , hideCustom4] = useToggle(true);\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Custom content</h4>\n                <p className=\"text-muted\">\n                    Alternatively, you can also add additional controls and components to toasts.\n                </p>\n                <Toast\n                    className=\"d-flex align-items-center mt-4\"\n                    show={isOpenCustom1}\n                    onClose={hideCustom1}\n                    delay={3000}\n                    autohide\n                >\n                    <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n                    <Button variant=\"\" onClick={hideCustom1} className=\"btn-close ms-auto me-2\"></Button>\n                </Toast>\n                <Toast\n                    className=\"d-flex align-items-center text-white bg-primary border-0 mt-4\"\n                    show={isOpenCustom2}\n                    onClose={hideCustom2}\n                    delay={6000}\n                    autohide\n                >\n                    <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n\n                    <Button\n                        variant=\"\"\n                        onClick={hideCustom2}\n                        className=\"btn-close btn-close-white ms-auto me-2\"\n                    ></Button>\n                </Toast>\n                <Toast className=\"mt-4\" show={isOpenCustom3} onClose={hideCustom3} delay={8000} autohide>\n                    <Toast.Body>\n                        Hello, world! This is a toast message.\n                        <div className=\"mt-2 pt-2 border-top\">\n                            <Button variant=\"primary\" className=\"btn-sm me-1\">\n                                Take action\n                            </Button>\n                            <Button variant=\"secondary\" onClick={hideCustom3} className=\"btn-sm\">\n                                Close\n                            </Button>\n                        </div>\n                    </Toast.Body>\n                </Toast>\n                <Toast\n                    className=\"text-white bg-primary mt-4\"\n                    show={isOpenCustom4}\n                    onClose={hideCustom4}\n                    delay={10000}\n                    autohide\n                >\n                    <Toast.Body>\n                        Hello, world! This is a toast message.\n                        <div className=\"mt-2 pt-2 border-top\">\n                            <Button variant=\"light\" className=\"btn-sm me-1\">\n                                Take action\n                            </Button>\n                            <Button variant=\"secondary\" onClick={hideCustom4} className=\"btn-sm\">\n                                Close\n                            </Button>\n                        </div>\n                    </Toast.Body>\n                </Toast>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst PlacementToast = () => {\n    const [position, setPosition] = useState<ToastContainerProps['position']>('top-start');\n\n    const positions: ToastContainerProps['position'][] = [\n        'top-start',\n        'top-center',\n        'top-end',\n        'middle-start',\n        'middle-center',\n        'middle-end',\n        'bottom-start',\n        'bottom-center',\n        'bottom-end',\n    ];\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Placement</h4>\n                <p className=\"text-muted font-14\">\n                    Place toasts with custom CSS as you need them. The top right is often used for notifications, as is\n                    the top middle. If you’re only ever going to show one toast at a time, put the positioning styles\n                    right on the\n                    <code>.toast</code>.\n                </p>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"selectToastPlacement\">Toast placement</label>\n                    <Form.Select\n                        id=\"selectToastPlacement\"\n                        className=\"mt-2\"\n                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n                            setPosition(e.currentTarget.value as ToastContainerProps['position'])\n                        }\n                    >\n                        {(positions || []).map((p) => (\n                            <option key={p} value={p}>\n                                {p}\n                            </option>\n                        ))}\n                    </Form.Select>\n                </div>\n\n                <div\n                    aria-live=\"polite\"\n                    aria-atomic=\"true\"\n                    className=\"bg-light position-relative\"\n                    style={{ minHeight: '294px' }}\n                >\n                    <ToastContainer className=\"p-3\" position={position}>\n                        <Toast>\n                            <Toast.Header closeButton={false}>\n                                <img src={logo} className=\"me-1\" alt=\"\" height=\"12\" />\n                                <strong className=\"me-auto\">UBold</strong>\n                                <small>11 mins ago</small>\n                            </Toast.Header>\n                            <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n                        </Toast>\n                    </ToastContainer>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Notifications = () => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/toasts' },\n                    { label: 'Notifications', path: '/ui/notifications', active: true },\n                ]}\n                title={'Notifications'}\n            />\n\n            {/* toast */}\n            <Row>\n                <Col>\n                    <DefaultToasts />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <CustomToast />\n                </Col>\n                <Col lg={6}>\n                    <PlacementToast />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Notifications;\n","import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  'aria-label': PropTypes.string,\n  onClick: PropTypes.func,\n\n  /**\n   * Render different color variant for the button.\n   *\n   * Omitting this will render the default dark color.\n   */\n  variant: PropTypes.oneOf(['white'])\n};\nconst defaultProps = {\n  'aria-label': 'Close'\n};\nconst CloseButton = /*#__PURE__*/React.forwardRef(({\n  className,\n  variant,\n  ...props\n}, ref) => /*#__PURE__*/_jsx(\"button\", {\n  ref: ref,\n  type: \"button\",\n  className: classNames('btn-close', variant && `btn-close-${variant}`, className),\n  ...props\n}));\nCloseButton.displayName = 'CloseButton';\nCloseButton.propTypes = propTypes;\nCloseButton.defaultProps = defaultProps;\nexport default CloseButton;"],"names":["fadeStyles","ENTERING","EXITING","ToastFade","React","props","ref","_jsx","Fade","transitionClasses","displayName","onClose","ToastHeader","bsPrefix","closeLabel","closeVariant","closeButton","className","children","useBootstrapPrefix","context","useContext","ToastContext","handleClick","useEventCallback","e","_jsxs","classNames","CloseButton","variant","onClick","defaultProps","createWithBsPrefix","Toast","transition","Transition","show","animation","delay","autohide","bg","delayRef","useRef","onCloseRef","useEffect","current","autohideTimeout","useTimeout","autohideToast","autohideFunc","useCallback","set","toastContext","useMemo","hasAnimation","toast","role","value","in","unmountOnExit","Object","assign","Body","ToastBody","Header","positionClasses","ToastContainer","position","as","Component","DefaultToasts","useToggle","isOpen","hide","isOpenTranslucent","hideTranslucent","isOpenPlacement","hidePlacement","useState","time","desc","stacked","setStacked","Card","Row","Col","md","src","logo","alt","height","style","minHeight","top","right","map","item","index","list","splice","handleClose","toString","CustomToast","isOpenCustom1","hideCustom1","isOpenCustom2","hideCustom2","isOpenCustom3","hideCustom3","isOpenCustom4","hideCustom4","Button","PlacementToast","setPosition","htmlFor","Form","id","onChange","currentTarget","p","breadCrumbItems","label","path","active","title","lg","propTypes","PropTypes","type"],"sourceRoot":""}