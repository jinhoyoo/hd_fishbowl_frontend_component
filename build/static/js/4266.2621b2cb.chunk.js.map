{"version":3,"file":"static/js/4266.2621b2cb.chunk.js","mappings":"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","sources":["pages/uikit/Badges.tsx","../node_modules/react-bootstrap/esm/Badge.js"],"sourcesContent":["import { Row, Col, Card, Badge, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { PageTitle } from 'components';\nimport { Variant } from './types';\n\nconst colors: Variant[] = [\n    {\n        name: 'Primary',\n        color: 'primary',\n    },\n    {\n        name: 'Secondary',\n        color: 'secondary',\n    },\n    {\n        name: 'Success',\n        color: 'success',\n    },\n    {\n        name: 'Danger',\n        color: 'danger',\n    },\n    {\n        name: 'Warning',\n        color: 'warning',\n    },\n    {\n        name: 'Info',\n        color: 'info',\n    },\n    {\n        name: 'Light',\n        color: 'light',\n    },\n    {\n        name: 'Dark',\n        color: 'dark',\n    },\n];\n\nconst DefaultBadges = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Default</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    A simple labeling component. Badges scale to match the size of the immediate parent element by using\n                    relative font sizing and <code>em</code> units.\n                </p>\n\n                <h1>\n                    h1.Example heading <span className=\"badge bg-secondary text-light\">New</span>\n                </h1>\n                <h2>\n                    h2.Example heading <span className=\"badge badge-success-lighten\">New</span>\n                </h2>\n                <h3>\n                    h3.Example heading <span className=\"badge bg-primary\">New</span>\n                </h3>\n                <h4>\n                    h4.Example heading{' '}\n                    <Link to=\"#\" className=\"badge badge-info-lighten\">\n                        Info Link\n                    </Link>\n                </h4>\n                <h5>\n                    h5.Example heading <span className=\"badge badge-outline-warning\">New</span>\n                </h5>\n                <h6>\n                    h6.Example heading <span className=\"badge bg-danger\">New</span>\n                </h6>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ContexualBadges = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Contexual variations</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Add any of the below mentioned modifier classes to change the appearance of a badge. Badge can be\n                    more contextual as well. Just use regular convention e.g. <code>badge-*color</code>,\n                    <code>bg-primary</code> to have badge with different background.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge\n                            className={classNames(\n                                'me-1',\n                                'bg-' + color.color,\n                                color.color === 'light' ? 'text-dark' : null,\n                                { 'text-light': ['secondary', 'dark'].includes(color.color) }\n                            )}\n                            key={index.toString()}\n                        >\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Lighten Badges</h5>\n                <p className=\"text-muted font-14 mb-3\">\n                    Using the <code>.badge-*-lighten</code> modifier class, you can have more soften variation.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge\n                            bg=\"\"\n                            className={classNames('me-1', 'badge-' + color.color + '-lighten')}\n                            key={index.toString()}\n                        >\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Outline Badges</h5>\n                <p className=\"text-muted font-14 mb-3\">\n                    Using the <code>.badge-outline-*</code> to quickly create a bordered badges.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge\n                            bg=\"\"\n                            className={classNames('me-1', 'badge-outline-' + color.color)}\n                            key={index.toString()}\n                        >\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst PillBadges = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Pill Badges</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Use the <code>.rounded-pill</code> modifier class to make badges more rounded.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge\n                            pill\n                            className={classNames(\n                                'me-1',\n                                'bg-' + color.color,\n                                color.color === 'light' ? 'text-dark' : null,\n                                { 'text-light': ['secondary', 'dark'].includes(color.color) }\n                            )}\n                            key={index.toString()}\n                        >\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Lighten Badges</h5>\n                <p className=\"text-muted font-14 mb-3\">\n                    Use the <code>.badge-*-lighten</code> modifier class to make badges lighten.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge\n                            bg=\"\"\n                            pill\n                            className={classNames('me-1', 'badge-' + color.color + '-lighten')}\n                            key={index.toString()}\n                        >\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n\n                <h5 className=\"mt-4\">Outline Badges</h5>\n                <p className=\"text-muted font-14 mb-3\">\n                    Using the <code>.badge-outline-*</code> to quickly create a bordered badges.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Badge\n                            bg=\"\"\n                            pill\n                            className={classNames('me-1', 'badge-outline-' + color.color)}\n                            key={index.toString()}\n                        >\n                            {color.name}\n                        </Badge>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst BadgePosition = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Badge Positioned</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Use utilities to modify a <code>.badge</code> and position it in the corner of a link or button.\n                </p>\n\n                <Row>\n                    <Col className=\"col-6\">\n                        <Button variant=\"primary\" className=\"position-relative\">\n                            Inbox\n                            <span className=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">\n                                99+\n                                <span className=\"visually-hidden\">unread messages</span>\n                            </span>\n                        </Button>\n                    </Col>\n                    <Col className=\"col-6\">\n                        <Button variant=\"primary\" className=\"position-relative\">\n                            Profile\n                            <span className=\"position-absolute top-0 start-100 translate-middle p-1 bg-danger border border-light rounded-circle\">\n                                <span className=\"visually-hidden\">New alerts</span>\n                            </span>\n                        </Button>\n                    </Col>\n                    <Col className=\"col-6\">\n                        <Button variant=\"success\" className=\"mt-4\">\n                            Notifications <span className=\"badge bg-light text-dark ms-1\">4</span>\n                        </Button>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Badges = () => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/badges' },\n                    { label: 'Badges', path: '/ui/badges', active: true },\n                ]}\n                title={'Badges'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <DefaultBadges />\n                    <PillBadges />\n                </Col>\n\n                <Col xl={6}>\n                    <ContexualBadges />\n                    <BadgePosition />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Badges;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  bg: 'primary',\n  pill: false\n};\nconst Badge = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  bg,\n  pill,\n  text,\n  className,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, pill && `rounded-pill`, text && `text-${text}`, bg && `bg-${bg}`)\n  });\n});\nBadge.displayName = 'Badge';\nBadge.defaultProps = defaultProps;\nexport default Badge;"],"names":["colors","name","color","DefaultBadges","className","to","ContexualBadges","map","index","classNames","includes","toString","bg","PillBadges","pill","BadgePosition","variant","breadCrumbItems","label","path","active","title","xl","Badge","React","ref","bsPrefix","text","as","Component","props","prefix","useBootstrapPrefix","_jsx","displayName","defaultProps"],"sourceRoot":""}