{"version":3,"file":"static/js/2159.95a02a51.chunk.js","mappings":"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","sources":["pages/uikit/Buttons.tsx","../node_modules/react-bootstrap/esm/ButtonGroup.js","../node_modules/react-bootstrap/esm/DropdownButton.js","../node_modules/react-bootstrap/esm/types.js"],"sourcesContent":["import { Row, Col, Card, Button, ButtonGroup, DropdownButton, Dropdown } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport { PageTitle } from 'components';\nimport { Variant } from './types';\n\nconst buttons: Variant[] = [\n    {\n        name: 'Primary',\n        color: 'primary',\n    },\n    {\n        name: 'Secondary',\n        color: 'secondary',\n    },\n    {\n        name: 'Success',\n        color: 'success',\n    },\n    {\n        name: 'Danger',\n        color: 'danger',\n    },\n    {\n        name: 'Warning',\n        color: 'warning',\n    },\n    {\n        name: 'Info',\n        color: 'info',\n    },\n    {\n        name: 'Light',\n        color: 'light',\n    },\n    {\n        name: 'Dark',\n        color: 'dark',\n    },\n];\n\nconst DefaultButtons = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Default Buttons</h4>\n                <p className=\"text-muted font-14\">\n                    Use the button classes on an <code>&lt;a&gt;</code>, <code>&lt;button&gt;</code>, or{' '}\n                    <code>&lt;input&gt;</code> element.\n                </p>\n\n                <div className=\"button-list\">\n                    {buttons.map((button, index) => {\n                        return (\n                            <Button key={index.toString()} variant={button.color}>\n                                {button.name}\n                            </Button>\n                        );\n                    })}\n                    <Button variant=\"link\">Link</Button>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst OutlineButtons = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Button Outline</h4>\n                <p className=\"text-muted font-14\">\n                    Use a classes <code>.btn-outline-**</code> to quickly create a bordered buttons.\n                </p>\n\n                <div className=\"button-list\">\n                    {buttons.map((button, index) => {\n                        return (\n                            <Button key={index.toString()} variant={'outline-' + button.color}>\n                                {button.name}\n                            </Button>\n                        );\n                    })}\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst RoundedButtons = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Button-Rounded</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>.btn-rounded</code> to default button to get rounded corners.\n                </p>\n\n                <div className=\"button-list\">\n                    {buttons.map((button, index) => {\n                        return (\n                            <Button key={index.toString()} variant={button.color} className=\"btn-rounded\">\n                                {button.name}\n                            </Button>\n                        );\n                    })}\n                    <Button variant=\"link\" className=\"btn-rounded\">\n                        Link\n                    </Button>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst OutlineRoundedButtons = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Button Outline Rounded</h4>\n                <p className=\"text-muted font-14\">\n                    Use a classes <code>.btn-outline-**</code> to quickly create a bordered buttons.\n                </p>\n\n                <div className=\"button-list\">\n                    {buttons.map((button, index) => {\n                        return (\n                            <Button key={index.toString()} variant={'outline-' + button.color} className=\"btn-rounded\">\n                                {button.name}\n                            </Button>\n                        );\n                    })}\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ButtonSizes = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Button-Sizes</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>.btn-lg</code>, <code>.btn-sm</code> for additional sizes.\n                </p>\n\n                <div className=\"button-list\">\n                    <Button size=\"lg\" variant=\"primary\">\n                        Large\n                    </Button>\n                    <Button variant=\"info\">Normal</Button>\n                    <Button size=\"sm\" variant=\"success\">\n                        Small\n                    </Button>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DisabledButton = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Button-Disabled</h4>\n                <p className=\"text-muted font-14\">\n                    Add the <code>disabled</code> attribute to <code>&lt;button&gt;</code> buttons.\n                </p>\n\n                <div className=\"button-list\">\n                    <Button disabled variant=\"info\">\n                        Info\n                    </Button>\n                    <Button disabled variant=\"success\">\n                        Success\n                    </Button>\n                    <Button disabled variant=\"danger\">\n                        Danger\n                    </Button>\n                    <Button disabled variant=\"dark\">\n                        Dark\n                    </Button>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst BlockButton = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Block Level Buttons</h4>\n                <p className=\"text-muted font-14\">\n                    Create block level buttons by adding class <code>.d-grid</code> to parent div.\n                </p>\n\n                <div className=\"button-list\">\n                    <div className=\"d-grid\">\n                        <Button variant=\"primary\">Block Button</Button>\n                        <Button variant=\"info\">Block Button</Button>\n                        <Button variant=\"success\">Block Button</Button>\n                    </div>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst IconButtons = () => {\n    const icons: string[] = [\n        'mdi-heart-outline',\n        'mdi-window-close',\n        'mdi-music',\n        'mdi-star',\n        'mdi mdi-thumb-up-outline',\n        'mdi mdi-keyboard',\n        'mdi mdi-wrench',\n        'mdi-star-outline',\n        'mdi-heart',\n    ];\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Icon Button</h4>\n                <p className=\"text-muted font-14\">Icon only button.</p>\n\n                <div className=\"button-list\">\n                    {buttons.map((button, index) => {\n                        return (\n                            <Button key={index.toString()} variant={button.color} className=\"btn-icon\">\n                                <i className={classNames('mdi', icons[index], 'ms-1', 'me-1')}></i>\n                            </Button>\n                        );\n                    })}\n\n                    <br />\n                    <Button type=\"button\" variant=\"light\">\n                        <i className=\"mdi mdi-heart me-1\"></i> <span>Like</span>\n                    </Button>\n                    <Button type=\"button\" variant=\"warning\">\n                        <i className=\"mdi mdi-rocket me-1\"></i> <span>Launch</span>\n                    </Button>\n                    <Button type=\"button\" variant=\"info\">\n                        <i className=\"mdi mdi-cloud me-1\"></i> <span>Cloud Hosting</span>\n                    </Button>\n\n                    <br />\n                    <Button type=\"button\" variant=\"outline-success\">\n                        <i className=\"uil-money-withdrawal\"></i> Money\n                    </Button>\n                    <Button type=\"button\" variant=\"outline-primary\">\n                        <i className=\"uil-paypal\"></i> PayPal\n                    </Button>\n                    <Button type=\"button\" variant=\"outline-danger\">\n                        <i className=\"uil-cog\"></i> Settings\n                    </Button>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ButtonGroups = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Button Group</h4>\n                <p className=\"text-muted font-14\">\n                    Wrap a series of buttons with <code>.btn</code> in <code>.btn-group</code>.\n                </p>\n\n                <ButtonGroup className=\"mb-2\">\n                    <Button variant=\"light\">Left</Button>\n                    <Button variant=\"light\">Middle</Button>\n                    <Button variant=\"light\">Right</Button>\n                </ButtonGroup>\n\n                <br />\n\n                <ButtonGroup className=\"mb-2 me-1\">\n                    <Button variant=\"light\">1</Button>\n                    <Button variant=\"light\">2</Button>\n                    <Button variant=\"light\">3</Button>\n                    <Button variant=\"light\">4</Button>\n                </ButtonGroup>\n                <ButtonGroup className=\"mb-2 me-1\">\n                    <Button variant=\"light\">5</Button>\n                    <Button variant=\"light\">6</Button>\n                    <Button variant=\"light\">7</Button>\n                </ButtonGroup>\n                <ButtonGroup className=\"mb-2\">\n                    <Button variant=\"light\">8</Button>\n                </ButtonGroup>\n\n                <br />\n\n                <ButtonGroup className=\"mb-2\">\n                    <Button variant=\"light\">1</Button>\n                    <Button variant=\"primary\">2</Button>\n                    <Button variant=\"light\">3</Button>\n                    <DropdownButton as={ButtonGroup} title=\"Dropdown\" variant=\"light\">\n                        <Dropdown.Item eventKey=\"1\">Dropdown link</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"2\">Dropdown link</Dropdown.Item>\n                    </DropdownButton>\n                </ButtonGroup>\n\n                <Row>\n                    <Col md={3}>\n                        <ButtonGroup vertical>\n                            <Button variant=\"light\">Top</Button>\n                            <Button variant=\"light\">Middle</Button>\n                            <Button variant=\"light\">Bottom</Button>\n                        </ButtonGroup>\n                    </Col>\n                    <Col md={3}>\n                        <ButtonGroup vertical>\n                            <Button variant=\"light\">Button 1</Button>\n                            <Button variant=\"light\">Button 2</Button>\n                            <DropdownButton as={ButtonGroup} title=\"Button 3\" variant=\"light\">\n                                <Dropdown.Item eventKey=\"1\">Dropdown link</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"2\">Dropdown link</Dropdown.Item>\n                            </DropdownButton>\n                        </ButtonGroup>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Buttons = () => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/buttons' },\n                    { label: 'Buttons', path: '/ui/buttons', active: true },\n                ]}\n                title={'Buttons'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <DefaultButtons />\n                </Col>\n\n                <Col xl={6}>\n                    <RoundedButtons />\n                </Col>\n\n                <Col xl={6}>\n                    <OutlineButtons />\n                </Col>\n\n                <Col xl={6}>\n                    <OutlineRoundedButtons />\n                </Col>\n\n                <Col xl={6}>\n                    <ButtonSizes />\n                </Col>\n\n                <Col xl={6}>\n                    <DisabledButton />\n                </Col>\n\n                <Col xl={6}>\n                    <IconButtons />\n                </Col>\n\n                <Col xl={6}>\n                    <BlockButton />\n                </Col>\n\n                <Col xl={6}>\n                    <ButtonGroups />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Buttons;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  vertical: false,\n  role: 'group'\n};\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, { ...rest,\n    ref: ref,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */\n  id: PropTypes.string,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n}), PropTypes.object]);"],"names":["buttons","name","color","DefaultButtons","className","map","button","index","variant","toString","OutlineButtons","RoundedButtons","OutlineRoundedButtons","ButtonSizes","size","DisabledButton","disabled","BlockButton","IconButtons","icons","classNames","type","ButtonGroups","as","ButtonGroup","title","eventKey","md","vertical","breadCrumbItems","label","path","active","xl","React","ref","bsPrefix","Component","rest","prefix","useBootstrapPrefix","baseClass","_jsx","displayName","defaultProps","role","propTypes","id","PropTypes","href","onClick","align","alignPropType","menuRole","renderMenuOnMount","rootCloseEvent","menuVariant","DropdownButton","children","props","_jsxs","Dropdown","DropdownToggle","childBsPrefix","DropdownMenu","renderOnMount","alignDirection","sm","lg","xxl"],"sourceRoot":""}