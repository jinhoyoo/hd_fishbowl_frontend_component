{"version":3,"file":"static/js/9434.8fc59fef.chunk.js","mappings":"kOAKMA,EAAQ,WACV,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIC,UAAU,eAAd,uBACA,cAAGA,UAAU,qBAAb,0DAEA,eAAGA,UAAU,aAAb,4CACoC,KAChC,SAAC,IAAD,CAAgBC,UAAU,MAAMC,SAAS,SAAC,IAAD,CAASC,GAAG,kBAAZ,6BAAzC,UACI,SAAC,KAAD,CAAMC,GAAG,IAAT,8BACc,IAJtB,mLAOI,SAAC,IAAD,CAAgBH,UAAU,MAAMC,SAAS,SAAC,IAAD,CAASC,GAAG,kBAAZ,2BAAzC,UACI,SAAC,KAAD,CAAMC,GAAG,IAAT,wBACc,IATtB,kMAYI,SAAC,IAAD,CACIH,UAAU,MACVC,SAAS,SAAC,IAAD,CAASC,GAAG,kBAAZ,oCAFb,UAII,SAAC,KAAD,CAAMC,GAAG,IAAT,0BAhBR,iDAmBI,SAAC,IAAD,CAAgBH,UAAU,MAAMC,SAAS,SAAC,IAAD,CAASC,GAAG,kBAAZ,6BAAzC,UACI,SAAC,KAAD,CAAMC,GAAG,IAAT,gCApBR,8DA6BVC,EAAY,WAQd,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIL,UAAU,eAAd,8BACA,cAAGA,UAAU,qBAAb,+EAX2B,CACnC,CAAEC,UAAW,OACb,CAAEA,UAAW,UACb,CAAEA,UAAW,SACb,CAAEA,UAAW,SASOK,KAAI,SAACC,EAAWC,GAAZ,OACZ,SAAC,IAAD,CAEIP,UAAWM,EAAUN,UACrBC,SACI,UAAC,IAAD,CAASC,GAAE,kBAAaI,EAAUN,WAAlC,yBACe,4BAASM,EAAUN,YADlC,OAJR,UASI,UAAC,IAAD,CAAQQ,QAAQ,OAAOT,UAAU,OAAjC,wBACgBO,EAAUN,cATrBO,EAAME,qBAkB7BC,EAAmB,WACrB,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIX,UAAU,eAAd,gCACA,eAAGA,UAAU,qBAAb,gCACsB,uCADtB,4LAGmB,oCAHnB,QAG+C,qCAH/C,oBAG0F,KACtF,6CAJJ,gCAMA,SAAC,IAAD,CAAgBE,SAAS,SAAC,IAAD,CAASC,GAAG,mBAAZ,sBAAzB,UACI,iBAAMH,UAAU,iBAAhB,UACI,SAAC,IAAD,CAAQY,UAAQ,EAACC,MAAO,CAAEC,cAAe,QAAzC,uCAUlBC,EAAc,WAChB,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIf,UAAU,eAAd,wBACA,cAAGA,UAAU,qBAAb,0CAEA,SAAC,IAAD,CACIC,UAAU,MACVC,SACI,UAAC,IAAD,YACI,oCADJ,KACqB,gCADrB,KACiC,mCAJzC,UAQI,SAAC,IAAD,CAAQO,QAAQ,YAAhB,uCAgCpB,UAzBiB,WACb,OACI,iCACI,SAAC,KAAD,CACIO,gBAAiB,CACb,CAAEC,MAAO,UAAWC,KAAM,gBAC1B,CAAED,MAAO,WAAYC,KAAM,eAAgBC,QAAQ,IAEvDC,MAAO,cAGX,UAAC,IAAD,YACI,UAAC,IAAD,CAAKC,GAAI,EAAT,WACI,SAACtB,EAAD,KACA,SAACY,EAAD,QAEJ,UAAC,IAAD,CAAKU,GAAI,EAAT,WACI,SAAChB,EAAD,KACA,SAACU,EAAD","sources":["pages/uikit/Tooltips.tsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport { Row, Col, Card, OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\nimport { PageTitle } from 'components';\nimport { PopoverDirection } from './types';\n\nconst Basic = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Examples</h4>\n                <p className=\"text-muted font-14\">Hover over the links below to see tooltips.</p>\n\n                <p className=\"muted mb-0\">\n                    Tight pants next level keffiyeh{' '}\n                    <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"overlay-example\"> Default title </Tooltip>}>\n                        <Link to=\"#\"> you probably </Link>\n                    </OverlayTrigger>{' '}\n                    haven't heard of them. Photo booth beard raw denim letterpress vegan messenger bag stumptown.\n                    Farm-to-table seitan, mcsweeney's fixie sustainable quinoa 8-bit american apparel\n                    <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"overlay-example\"> Another one </Tooltip>}>\n                        <Link to=\"#\"> have a </Link>\n                    </OverlayTrigger>{' '}\n                    terry richardson vinyl chambray. Beard stumptown, cardigans banh mi lomo thundercats. Tofu biodiesel\n                    williamsburg marfa, four loko mcsweeney's cleanse vegan chambray. A really ironic artisan\n                    <OverlayTrigger\n                        placement=\"top\"\n                        overlay={<Tooltip id=\"overlay-example\"> Another one here too </Tooltip>}\n                    >\n                        <Link to=\"#\"> whatever </Link>\n                    </OverlayTrigger>\n                    keytar, scenester farm-to-table banksy Austin\n                    <OverlayTrigger placement=\"top\" overlay={<Tooltip id=\"overlay-example\"> The last tip! </Tooltip>}>\n                        <Link to=\"#\"> twitter handle </Link>\n                    </OverlayTrigger>\n                    freegan cred raw denim single-origin coffee viral.\n                </p>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Direction = () => {\n    const directions: PopoverDirection[] = [\n        { placement: 'top' },\n        { placement: 'bottom' },\n        { placement: 'right' },\n        { placement: 'left' },\n    ];\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Four Directions</h4>\n                <p className=\"text-muted font-14\">Four options are available: top, right, bottom, and left aligned.</p>\n\n                {directions.map((direction, index) => (\n                    <OverlayTrigger\n                        key={index.toString()}\n                        placement={direction.placement}\n                        overlay={\n                            <Tooltip id={`tooltip-${direction.placement}`}>\n                                Tooltip on <strong>{direction.placement}</strong>.\n                            </Tooltip>\n                        }\n                    >\n                        <Button variant=\"info\" className=\"me-1\">\n                            Tooltip on {direction.placement}\n                        </Button>\n                    </OverlayTrigger>\n                ))}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DisabledElements = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Disabled Elements</h4>\n                <p className=\"text-muted font-14\">\n                    Elements with the <code>disabled</code> attribute aren’t interactive, meaning users cannot hover or\n                    click them to trigger a popover (or tooltip). As a workaround, you’ll want to trigger the popover\n                    from a wrapper <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code> and override the{' '}\n                    <code>pointer-events</code> on the disabled element.\n                </p>\n                <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Tooltip!</Tooltip>}>\n                    <span className=\"d-inline-block\">\n                        <Button disabled style={{ pointerEvents: 'none' }}>\n                            Disabled button\n                        </Button>\n                    </span>\n                </OverlayTrigger>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HtmlContent = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Html Tags</h4>\n                <p className=\"text-muted font-14\">And with custom HTML added:</p>\n\n                <OverlayTrigger\n                    placement=\"top\"\n                    overlay={\n                        <Tooltip>\n                            <em>Tooltip</em> <u>with</u> <b>HTML</b>\n                        </Tooltip>\n                    }\n                >\n                    <Button variant=\"secondary\">Tooltip with HTML</Button>\n                </OverlayTrigger>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Tooltips = () => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/tooltips' },\n                    { label: 'Tooltips', path: '/ui/tooltips', active: true },\n                ]}\n                title={'Tooltips'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <Basic />\n                    <DisabledElements />\n                </Col>\n                <Col xl={6}>\n                    <Direction />\n                    <HtmlContent />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Tooltips;\n"],"names":["Basic","className","placement","overlay","id","to","Direction","map","direction","index","variant","toString","DisabledElements","disabled","style","pointerEvents","HtmlContent","breadCrumbItems","label","path","active","title","xl"],"sourceRoot":""}