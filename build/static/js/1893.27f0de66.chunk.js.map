{"version":3,"file":"static/js/1893.27f0de66.chunk.js","mappings":"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","sources":["pages/apps/Chat/data.ts","pages/apps/Chat/ChatUsers.tsx","pages/apps/Chat/hooks/useChatUsers.ts","pages/apps/Chat/ChatArea.tsx","pages/apps/Chat/hooks/useChatArea.ts","pages/apps/Chat/ChatProfile.tsx","pages/apps/Chat/Chat.tsx","pages/apps/Chat/hooks/useChatApp.ts"],"sourcesContent":["import { ChatMessage, ChatUser } from './types';\nimport avatar1 from 'assets/images/users/avatar-1.jpg';\nimport avatar2 from 'assets/images/users/avatar-2.jpg';\nimport avatar3 from 'assets/images/users/avatar-3.jpg';\nimport avatar4 from 'assets/images/users/avatar-4.jpg';\nimport avatar5 from 'assets/images/users/avatar-5.jpg';\nimport avatar6 from 'assets/images/users/avatar-6.jpg';\nimport avatar7 from 'assets/images/users/avatar-7.jpg';\nimport avatar8 from 'assets/images/users/avatar-8.jpg';\nimport avatar9 from 'assets/images/users/avatar-9.jpg';\n\nconst users: ChatUser[] = [\n    {\n        id: 1,\n        name: 'Brandon Smith',\n        avatar: avatar2,\n        lastMessage: 'How are you today?',\n        totalUnread: 3,\n        lastMessageOn: '4:30am',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'California, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Favourties',\n    },\n    {\n        id: 2,\n        name: 'Maria C',\n        avatar: avatar5,\n        lastMessage: \"Hey! a reminder for tomorrow's meeting?\",\n        lastMessageOn: '5:30am',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'New York, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Friends',\n    },\n    {\n        id: 3,\n        name: 'Dominic A',\n        avatar: avatar4,\n        lastMessage: \"Are we going to have this week's planning meeting?\",\n        totalUnread: 2,\n        lastMessageOn: 'Thu',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'New Jersey, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Favourties',\n    },\n    {\n        id: 4,\n        name: 'Ronda D',\n        avatar: avatar9,\n        lastMessage: 'Please check these design assets..',\n        lastMessageOn: 'Wed',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'California, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Friends',\n    },\n    {\n        id: 5,\n        name: 'Michael H',\n        avatar: avatar6,\n        lastMessage: 'Are you free for 15 mins? I would like to discuss something',\n        totalUnread: 6,\n        lastMessageOn: 'Tue',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'New York, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Friends',\n    },\n    {\n        id: 6,\n        name: 'Thomas R',\n        avatar: avatar7,\n        lastMessage: \"Let's have meeting today between me, you and Tony...\",\n        lastMessageOn: 'Tue',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'New Jersey, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Friends',\n    },\n    {\n        id: 7,\n        name: 'Thomas J',\n        avatar: avatar8,\n        lastMessage: 'Howdy?',\n        lastMessageOn: 'Tue',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'New York, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Favourties',\n    },\n    {\n        id: 8,\n        name: 'Rikcy J',\n        avatar: avatar3,\n        lastMessage: 'Are you interested in learning?',\n        totalUnread: 28,\n        lastMessageOn: 'Mon',\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'New Jersey, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Friends',\n    },\n];\n\nconst messages: ChatMessage[] = [];\n\nconst defaultTo: ChatUser = {\n    id: 9,\n    name: 'Shreyu N',\n    avatar: avatar1,\n    email: 'support@coderthemes.com',\n    phone: '+1 456 9595 9594',\n    location: 'California, USA',\n    languages: 'English, German, Spanish',\n    groups: 'Work, Friends',\n};\n\nfor (const user of users) {\n    messages.push(\n        {\n            id: 1,\n            message: {\n                type: 'text',\n                value: { text: 'Hello!' },\n            },\n            to: defaultTo,\n            from: user,\n            sendOn: '10:00',\n        },\n        {\n            id: 2,\n            message: {\n                type: 'text',\n                value: { text: 'Hi, How are you? What about our next meeting?' },\n            },\n            to: user,\n            from: defaultTo,\n            sendOn: '10:01',\n        },\n        {\n            id: 3,\n            message: {\n                type: 'text',\n                value: { text: 'Yeah everything is fine' },\n            },\n            to: defaultTo,\n            from: user,\n            sendOn: '10:01',\n        },\n        {\n            id: 4,\n            message: {\n                type: 'text',\n                value: { text: 'Awesome!' },\n            },\n            to: user,\n            from: defaultTo,\n            sendOn: '10:02',\n        },\n        {\n            id: 5,\n            message: {\n                type: 'text',\n                value: { text: \"Let's have it today if you are free\" },\n            },\n            to: defaultTo,\n            from: user,\n            sendOn: '10:03',\n        },\n        {\n            id: 6,\n            message: {\n                type: 'text',\n                value: { text: 'Sure thing! let me know if 2pm works for you' },\n            },\n            to: user,\n            from: defaultTo,\n            sendOn: '10:03',\n        },\n        {\n            id: 7,\n            message: {\n                type: 'text',\n                value: { text: 'Sorry, I have another meeting scheduled at 2pm. Can we have it at 3pm instead?' },\n            },\n            to: defaultTo,\n            from: user,\n            sendOn: '10:04',\n        },\n        {\n            id: 8,\n            message: {\n                type: 'text',\n                value: { text: 'We can also discuss about the presentation talk format if you have some extra mins' },\n            },\n            to: defaultTo,\n            from: user,\n            sendOn: '10:04',\n        },\n        {\n            id: 9,\n            message: {\n                type: 'text',\n                value: {\n                    text: \"3pm it is. Sure, let's discuss about presentation format, it would be great to finalize today. I am attaching the last year format and assets here..\",\n                },\n            },\n            to: user,\n            from: defaultTo,\n            sendOn: '10:05',\n        },\n        {\n            id: 10,\n            message: {\n                type: 'file',\n                value: {\n                    file: 'Hyper-admin.zip',\n                    size: '2.3MB',\n                },\n            },\n            to: user,\n            from: defaultTo,\n            sendOn: '10:05',\n        }\n    );\n}\n\nexport { users, messages };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\nimport { ChatUser } from './types';\nimport { useChatUsers } from './hooks';\n\ntype ChatUsersProps = {\n    onUserSelect: (value: ChatUser) => void;\n};\n\nconst ChatUsers = ({ onUserSelect }: ChatUsersProps) => {\n    const groupFilters = ['All', 'Favourties', 'Friends'];\n    const { user, selectedUser, selectedGroup, filterUsers, search, activateUser } = useChatUsers(onUserSelect);\n\n    return (\n        <Card>\n            <Card.Body className=\"p-0\">\n                <ul className=\"nav nav-tabs nav-bordered\">\n                    {groupFilters.map((group, index) => {\n                        return (\n                            <li key={index} className=\"nav-item\" onClick={() => filterUsers(group)}>\n                                <Link\n                                    to=\"#\"\n                                    className={classnames('nav-link', 'py-2', {\n                                        active: selectedGroup === group,\n                                    })}\n                                >\n                                    {group}\n                                </Link>\n                            </li>\n                        );\n                    })}\n                </ul>\n\n                <div className=\"tab-content\">\n                    <div className=\"tab-pane show active\">\n                        <div className=\"app-search p-3\">\n                            <div className=\"form-group position-relative\">\n                                <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    placeholder=\"People, groups & messages...\"\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => search(e.target.value)}\n                                />\n                                <span className=\"mdi mdi-magnify search-icon\"></span>\n                            </div>\n                        </div>\n\n                        <SimpleBar className=\"px-3\" style={{ maxHeight: '550px', width: '100%' }}>\n                            {user.map((user, index) => {\n                                return (\n                                    <Link\n                                        to=\"#\"\n                                        key={index}\n                                        className=\"text-body\"\n                                        onClick={(e) => {\n                                            activateUser(user);\n                                        }}\n                                    >\n                                        <div\n                                            className={classnames('d-flex', 'align-items-start', 'mt-1', 'p-2', {\n                                                'bg-light': user.id === selectedUser.id,\n                                            })}\n                                        >\n                                            <img src={user.avatar} className=\"me-2 rounded-circle\" height=\"48\" alt=\"\" />\n\n                                            <div className=\"w-100 overflow-hidden\">\n                                                <h5 className=\"mt-0 mb-0 font-14\">\n                                                    <span className=\"float-end text-muted font-12\">\n                                                        {user.lastMessageOn}\n                                                    </span>\n                                                    {user.name}\n                                                </h5>\n                                                <p className=\"mt-1 mb-0 text-muted font-14\">\n                                                    <span className=\"w-25 float-end text-end\">\n                                                        {user.totalUnread && (\n                                                            <span className=\"badge badge-danger-lighten\">\n                                                                {user.totalUnread}\n                                                            </span>\n                                                        )}\n                                                    </span>\n                                                    <span className=\"w-75\">{user.lastMessage}</span>\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </Link>\n                                );\n                            })}\n                        </SimpleBar>\n                    </div>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default ChatUsers;\n","import { useState } from 'react';\nimport { ChatUser } from '../types';\nimport { users } from '../data';\n\nexport default function useChatUsers(onUserSelect: (value: ChatUser) => void) {\n    const [user, setUser] = useState<ChatUser[]>([...users]);\n    const [selectedUser, setSelectedUser] = useState<ChatUser>(users[1]);\n    const [selectedGroup, setSelectedGroup] = useState<string>('All');\n\n    /**\n     * Filter users\n     */\n    const filterUsers = (group: string) => {\n        setSelectedGroup(group);\n        setUser(\n            group !== 'All'\n                ? [...users].filter((u) => u.groups.toLowerCase().indexOf(group.toLowerCase()) >= 0)\n                : [...users]\n        );\n    };\n\n    /**\n     * Search the user\n     * @param {*} text\n     */\n    const search = (text: string) => {\n        setUser(text ? [...users].filter((u) => u.name.toLowerCase().indexOf(text.toLowerCase()) >= 0) : [...users]);\n    };\n\n    /**\n     * Activates the user\n     * @param {*} user\n     */\n    const activateUser = (user: ChatUser) => {\n        setSelectedUser(user);\n        if (onUserSelect) {\n            onUserSelect(user);\n        }\n    };\n\n    return {\n        user,\n        selectedUser,\n        selectedGroup,\n        filterUsers,\n        search,\n        activateUser,\n    };\n}\n","import { Link } from 'react-router-dom';\nimport { Card, Dropdown, Row, Col } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\nimport { FormInput, Loader } from 'components';\nimport { ChatMessage, ChatUser } from './types';\nimport { useChatArea } from './hooks';\n\ntype UserMessageProps = {\n    message: ChatMessage;\n    toUser: ChatUser;\n};\n\nconst UserMessage = ({ message, toUser }: UserMessageProps) => {\n    return (\n        <li className={classnames('clearfix', { odd: message.from.id === toUser.id })}>\n            <div className=\"chat-avatar\">\n                <img src={message.from.avatar} className=\"rounded\" alt=\"\" />\n                <i>{message.sendOn}</i>\n            </div>\n\n            <div className=\"conversation-text\">\n                <div className=\"ctext-wrap\">\n                    <i>{message.from.name}</i>\n                    {message.message.type === 'text' && <p>{message.message.value.text}</p>}\n                </div>\n                {message.message.type === 'file' && (\n                    <Card className=\"mt-2 mb-1 shadow-none border text-start\">\n                        <div className=\"p-2\">\n                            <Row className=\"align-items-center\">\n                                <Col className=\"col-auto\">\n                                    <div className=\"avatar-sm\">\n                                        <span className=\"avatar-title rounded\">\n                                            <i className=\"uil uil-file-upload-alt font-20\"></i>\n                                        </span>\n                                    </div>\n                                </Col>\n                                <Col className=\"ps-0\">\n                                    <Link to=\"#\" className=\"text-muted fw-bold\">\n                                        {message.message.value.file}\n                                    </Link>\n                                    <p className=\"mb-0\">{message.message.value.size}</p>\n                                </Col>\n                                <Col className=\"col-auto\">\n                                    <Link to=\"#\" className=\"btn btn-link btn-lg text-muted\">\n                                        <i className=\"dripicons-download\"></i>\n                                    </Link>\n                                </Col>\n                            </Row>\n                        </div>\n                    </Card>\n                )}\n            </div>\n\n            <Dropdown className=\"conversation-actions\" align=\"end\">\n                <Dropdown.Toggle variant=\"link\" className=\"btn btn-sm btn-link arrow-none shadow-none\">\n                    <i className=\"uil uil-ellipsis-v\"></i>\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    <Dropdown.Item>Copy Messaget</Dropdown.Item>\n                    <Dropdown.Item>Edit</Dropdown.Item>\n                    <Dropdown.Item>Delete</Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </li>\n    );\n};\n\ntype ChatAreaProps = {\n    selectedUser: ChatUser;\n};\n\nconst ChatArea = ({ selectedUser }: ChatAreaProps) => {\n    const { loading, toUser, userMessages, handleSubmit, register, control, errors, sendChatMessage } =\n        useChatArea(selectedUser);\n\n    return (\n        <Card>\n            <Card.Body className=\"position-relative px-0 pb-0\">\n                {loading && <Loader />}\n\n                <SimpleBar style={{ height: '538px', width: '100%' }}>\n                    <ul className=\"conversation-list px-3\">\n                        {userMessages.map((message, index) => {\n                            return <UserMessage key={index.toString()} message={message} toUser={toUser} />;\n                        })}\n                    </ul>\n                </SimpleBar>\n\n                <Row className=\"px-3 pb-3\">\n                    <Col>\n                        <div className=\"mt-2 bg-light p-3 rounded\">\n                            <form noValidate name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(sendChatMessage)}>\n                                <div className=\"row\">\n                                    <div className=\"col mb-2 mb-sm-0\">\n                                        <FormInput\n                                            type=\"text\"\n                                            name=\"newMessage\"\n                                            className=\"border-0\"\n                                            placeholder=\"Enter your text\"\n                                            register={register}\n                                            key=\"newMessage\"\n                                            errors={errors}\n                                            control={control}\n                                        />\n                                    </div>\n                                    <div className=\"col-sm-auto\">\n                                        <div className=\"btn-group\">\n                                            <Link to=\"#\" className=\"btn btn-light\">\n                                                <i className=\"uil uil-paperclip\"></i>\n                                            </Link>\n                                            <Link to=\"#\" className=\"btn btn-light\">\n                                                {' '}\n                                                <i className=\"uil uil-smile\"></i>{' '}\n                                            </Link>\n                                            <button type=\"submit\" className=\"btn btn-success chat-send btn-block\">\n                                                <i className=\"uil uil-message\"></i>\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default ChatArea;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { messages } from '../data';\nimport { ChatMessage, ChatUser } from '../types';\nimport avatar from 'assets/images/users/avatar-1.jpg';\n\nexport default function useChatArea(selectedUser: ChatUser) {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [userMessages, setUserMessages] = useState<ChatMessage[]>([]);\n    const [toUser] = useState<ChatUser>({\n        id: 9,\n        name: 'Shreyu N',\n        avatar: avatar,\n        email: 'support@coderthemes.com',\n        phone: '+1 456 9595 9594',\n        location: 'California, USA',\n        languages: 'English, German, Spanish',\n        groups: 'Work, Friends',\n    });\n    const timeoutRef = useRef<NodeJS.Timeout>();\n\n    /*\n     *  Fetches the messages for selected user\n     */\n    const getMessagesForUser = useCallback(() => {\n        if (selectedUser) {\n            setLoading(true);\n            const timeoutId = setTimeout(() => {\n                setUserMessages([\n                    ...messages.filter(\n                        (m) =>\n                            (m.to.id === toUser.id && m.from.id === selectedUser.id) ||\n                            (toUser.id === m.from.id && m.to.id === selectedUser.id)\n                    ),\n                ]);\n                setLoading(false);\n            }, 750);\n            timeoutRef.current = timeoutId;\n        }\n    }, [selectedUser, toUser]);\n\n    useEffect(() => {\n        getMessagesForUser();\n        return () => {\n            clearTimeout(timeoutRef.current!);\n        };\n    }, [getMessagesForUser, timeoutRef]);\n\n    /*\n     * form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            newMessage: yup.string().required('Please enter your messsage'),\n        })\n    );\n\n    /*\n     * form methods\n     */\n    const methods = useForm({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n        reset,\n    } = methods;\n\n    /**\n     * sends the chat message\n     */\n    const sendChatMessage = (value: Record<string, string>) => {\n        let newUserMessages = [...userMessages];\n        newUserMessages.push({\n            id: userMessages.length + 1,\n            from: toUser,\n            to: selectedUser,\n            message: { type: 'text', value: { text: value['newMessage'] } },\n            sendOn: new Date().getHours() + ':' + new Date().getMinutes(),\n        });\n        setUserMessages(newUserMessages);\n        reset();\n    };\n    return {\n        loading,\n        toUser,\n        userMessages,\n        handleSubmit,\n        register,\n        control,\n        errors,\n        sendChatMessage,\n    };\n}\n","import { Card, Dropdown, Button } from 'react-bootstrap';\nimport { ChatUser } from './types';\n\ntype ChatProfileProps = {\n    selectedUser: ChatUser;\n};\n\nconst ChatProfile = ({ selectedUser }: ChatProfileProps) => {\n    const user: ChatUser = selectedUser || {};\n    const groups: string[] = user.groups ? user.groups.split(',') : [];\n\n    return (\n        <>\n            {user && (\n                <Card>\n                    <Card.Body>\n                        <Dropdown className=\"float-end\" align=\"end\">\n                            <Dropdown.Toggle variant=\"link\" className=\"arrow-none card-drop p-0 shadow-none\">\n                                <i className=\"mdi mdi-dots-horizontal\"></i>\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                <Dropdown.Item>View Full</Dropdown.Item>\n                                <Dropdown.Item>Edit Contact Info</Dropdown.Item>\n                                <Dropdown.Item>Remove</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n\n                        <div className=\"mt-3 text-center\">\n                            <img src={user.avatar} alt=\"\" className=\"img-thumbnail avatar-lg rounded-circle\" />\n                            <h4>{user.name}</h4>\n                            <Button className=\"btn-sm mt-1\" color=\"primary\">\n                                <i className=\"uil uil-envelope-add me-1\"></i>Send Email\n                            </Button>\n                            <p className=\"text-muted mt-2 font-14\">\n                                Last Interacted: <strong>{user.lastMessageOn}</strong>\n                            </p>\n                        </div>\n\n                        <div className=\"mt-3\">\n                            <hr className=\"\" />\n\n                            <p className=\"mt-4 mb-1\">\n                                <strong>\n                                    <i className=\"uil uil-at\"></i> Email:\n                                </strong>\n                            </p>\n                            <p>{user.email}</p>\n\n                            <p className=\"mt-3 mb-1\">\n                                <strong>\n                                    <i className=\"uil uil-phone\"></i> Phone Number:\n                                </strong>\n                            </p>\n                            <p>{user.phone}</p>\n\n                            <p className=\"mt-3 mb-1\">\n                                <strong>\n                                    <i className=\"uil uil-location\"></i> Location:\n                                </strong>\n                            </p>\n                            <p>{user.location}</p>\n\n                            <p className=\"mt-3 mb-1\">\n                                <strong>\n                                    <i className=\"uil uil-globe\"></i> Languages:\n                                </strong>\n                            </p>\n                            <p>{user.languages}</p>\n\n                            <p className=\"mt-3 mb-2\">\n                                <strong>\n                                    <i className=\"uil uil-users-alt\"></i> Groups:\n                                </strong>\n                            </p>\n\n                            <p>\n                                {groups.map((group, index) => {\n                                    return (\n                                        <span\n                                            key={index.toString()}\n                                            className=\"badge badge-success-lighten p-1 font-14 me-1\"\n                                        >\n                                            {group}\n                                        </span>\n                                    );\n                                })}\n                            </p>\n                        </div>\n                    </Card.Body>\n                </Card>\n            )}\n        </>\n    );\n};\n\nexport default ChatProfile;\n","import { Row, Col } from 'react-bootstrap';\nimport { PageTitle } from 'components';\nimport ChatUsers from './ChatUsers';\nimport ChatArea from './ChatArea';\nimport ChatProfile from './ChatProfile';\nimport { useChatApp } from './hooks';\n\nconst Chat = () => {\n    const { selectedUser, onUserChange } = useChatApp();\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Apps', path: '/apps/chat' },\n                    { label: 'Chat', path: '/apps/chat', active: true },\n                ]}\n                title={'Chat'}\n            />\n\n            <Row>\n                <Col xxl={3} xl={{ span: 6, order: 1 }}>\n                    <ChatUsers onUserSelect={onUserChange} />\n                </Col>\n\n                <Col xxl={6} xl={{ span: 12, order: 2 }}>\n                    <ChatArea selectedUser={selectedUser} />\n                </Col>\n\n                <Col xxl={{ span: 3, order: 2 }} xl={{ span: 6, order: 1 }}>\n                    <ChatProfile selectedUser={selectedUser} />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport { Chat };\n","import { useState } from 'react';\nimport { ChatUser } from '../types';\nimport { users } from '../data';\n\nexport default function useChatApp() {\n    const [selectedUser, setSelectedUser] = useState<ChatUser>(users[1]);\n\n    /**\n     * On user change\n     */\n    const onUserChange = (user: ChatUser) => {\n        setSelectedUser(user);\n    };\n\n    return { selectedUser, onUserChange };\n}\n"],"names":["users","id","name","avatar","avatar2","lastMessage","totalUnread","lastMessageOn","email","phone","location","languages","groups","avatar5","avatar4","avatar6","avatar7","avatar8","avatar3","messages","defaultTo","avatar1","user","push","message","type","value","text","to","from","sendOn","file","size","onUserSelect","useState","setUser","selectedUser","setSelectedUser","selectedGroup","setSelectedGroup","filterUsers","group","filter","u","toLowerCase","indexOf","search","activateUser","useChatUsers","Card","className","map","index","onClick","classnames","active","placeholder","onChange","e","target","style","maxHeight","width","src","height","alt","UserMessage","toUser","odd","Row","Col","Dropdown","align","variant","loading","setLoading","userMessages","setUserMessages","timeoutRef","useRef","getMessagesForUser","useCallback","timeoutId","setTimeout","m","current","useEffect","clearTimeout","schemaResolver","yupResolver","yup","shape","newMessage","required","methods","useForm","resolver","handleSubmit","register","control","errors","formState","reset","sendChatMessage","newUserMessages","length","Date","getHours","getMinutes","useChatArea","toString","noValidate","onSubmit","split","Button","color","Chat","onUserChange","useChatApp","breadCrumbItems","label","path","title","xxl","xl","span","order"],"sourceRoot":""}