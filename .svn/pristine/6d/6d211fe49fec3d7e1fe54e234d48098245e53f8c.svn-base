{"version":3,"file":"static/js/699.b3355687.chunk.js","mappings":"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","sources":["pages/apps/Projects/Gantt/data.ts","pages/apps/Projects/ProjectForm.tsx","pages/apps/Projects/hooks/useProjectForm.ts","pages/apps/Projects/hooks/useProjectGannt.ts"],"sourcesContent":["import { Task } from 'frappe-gantt';\nimport { GanttProjectItem } from '../types';\n\nconst tasks: Task[] = [\n    {\n        id: '1',\n        name: 'Draft the new contract document for sales team',\n        start: '2019-07-16',\n        end: '2019-07-20',\n        progress: 55,\n        dependencies: '0',\n    },\n    {\n        id: '2',\n        name: 'Find out the old contract documents',\n        start: '2019-07-19',\n        end: '2019-07-21',\n        progress: 85,\n        dependencies: '1',\n    },\n    {\n        id: '3',\n        name: 'Organize meeting with sales associates to understand need in detail',\n        start: '2019-07-21',\n        end: '2019-07-22',\n        progress: 80,\n        dependencies: '2',\n    },\n    {\n        id: '4',\n        name: 'iOS App home page',\n        start: '2019-07-15',\n        end: '2019-07-17',\n        progress: 80,\n        dependencies: '0',\n    },\n    {\n        id: '5',\n        name: 'Write a release note',\n        start: '2019-07-18',\n        end: '2019-07-22',\n        progress: 65,\n        dependencies: '4',\n    },\n    {\n        id: '6',\n        name: 'Setup new sales project',\n        start: '2019-07-20',\n        end: '2019-07-31',\n        progress: 15,\n        dependencies: '0',\n    },\n    {\n        id: '7',\n        name: 'Invite user to a project',\n        start: '2019-07-25',\n        end: '2019-07-26',\n        progress: 99,\n        dependencies: '6',\n    },\n    {\n        id: '8',\n        name: 'Coordinate with business development',\n        start: '2019-07-28',\n        end: '2019-07-30',\n        progress: 35,\n        dependencies: '7',\n    },\n    {\n        id: '9',\n        name: 'Kanban board design',\n        start: '2019-08-01',\n        end: '2019-08-03',\n        progress: 25,\n        dependencies: '8',\n    },\n    {\n        id: '10',\n        name: 'Enable analytics tracking',\n        start: '2019-08-05',\n        end: '2019-08-07',\n        progress: 60,\n        dependencies: '9',\n    },\n];\n\nconst projects: GanttProjectItem[] = [\n    {\n        id: 'proj101',\n        name: 'Lunar',\n        status: 'On-Track',\n        icon: 'uil uil-moonset',\n    },\n    {\n        id: 'proj102',\n        name: 'Dark Moon',\n        status: 'On-Track',\n        icon: 'uil uil-moon-eclipse',\n    },\n    {\n        id: 'proj103',\n        name: 'Aurora',\n        status: 'Locked',\n        icon: 'uil uil-mountains',\n    },\n    {\n        id: 'proj104',\n        name: 'Blue Moon',\n        status: 'Locked',\n        icon: 'uil uil-moon',\n    },\n    {\n        id: 'proj105',\n        name: 'Casanova',\n        status: 'Delayed',\n        icon: 'uil uil-ship',\n    },\n    {\n        id: 'proj106',\n        name: 'Darwin',\n        status: 'On-Track',\n        icon: 'uil uil-subway-alt',\n    },\n    {\n        id: 'proj107',\n        name: 'Eagle',\n        status: 'Delayed',\n        icon: 'uil uil-gold',\n    },\n];\n\nexport { projects, tasks };\n","import { useState } from 'react';\nimport { Row, Col, Card, Form, Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { PageTitle, HyperDatepicker, FileUploader, FormInput } from 'components';\nimport { Link } from 'react-router-dom';\nimport { useProjectForm } from './hooks';\n\nconst ProjectForm = () => {\n    const [startDate, setStartDate] = useState<Date>(new Date());\n    const [endDate, setEndDate] = useState<Date>(new Date());\n\n    const {\n        teamMembers,\n        selectedTeamMembers,\n        handleSubmit,\n        register,\n        control,\n        errors,\n        handleValidSubmit,\n        selectTeamMembers,\n    } = useProjectForm();\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Projects', path: '/apps/projects' },\n                    { label: 'Create Project', path: '/apps/projects/new', active: true },\n                ]}\n                title={'Create Project'}\n            />\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <Row>\n                                <Col>\n                                    <form onSubmit={handleSubmit(handleValidSubmit)}>\n                                        <Row>\n                                            <Col xl={6}>\n                                                <FormInput\n                                                    name=\"name\"\n                                                    label=\"Name\"\n                                                    placeholder=\"Enter project name\"\n                                                    containerClass={'mb-3'}\n                                                    register={register}\n                                                    key=\"name\"\n                                                    errors={errors}\n                                                    control={control}\n                                                />\n\n                                                <FormInput\n                                                    name=\"overview\"\n                                                    label=\"Overview\"\n                                                    placeholder=\"Enter some brief about project..\"\n                                                    type=\"textarea\"\n                                                    rows=\"5\"\n                                                    containerClass={'mb-3'}\n                                                    register={register}\n                                                    key=\"overview\"\n                                                    errors={errors}\n                                                    control={control}\n                                                />\n\n                                                <Form.Group className=\"mb-3 position-relative\">\n                                                    <Form.Label>Start Date</Form.Label>\n                                                    <HyperDatepicker\n                                                        className=\"form-control\"\n                                                        value={startDate}\n                                                        onChange={(date) => setStartDate(date)}\n                                                    />\n                                                </Form.Group>\n\n                                                <FormInput\n                                                    name=\"budget\"\n                                                    label=\"Budget\"\n                                                    placeholder=\"Enter project budget\"\n                                                    type=\"number\"\n                                                    containerClass={'mb-3'}\n                                                    register={register}\n                                                    key=\"budget\"\n                                                    errors={errors}\n                                                    control={control}\n                                                />\n\n                                                <Form.Group className=\"mb-3\">\n                                                    <Form.Label>Team Members</Form.Label>\n                                                    <Typeahead\n                                                        id=\"select3\"\n                                                        labelKey=\"name\"\n                                                        multiple={false}\n                                                        options={teamMembers}\n                                                        placeholder=\"select Team Member...\"\n                                                        onChange={selectTeamMembers}\n                                                    />\n                                                    <div className=\"mt-2\">\n                                                        {selectedTeamMembers.map((member, index) => {\n                                                            return (\n                                                                <OverlayTrigger\n                                                                    key={index.toString()}\n                                                                    placement=\"top\"\n                                                                    overlay={<Tooltip>{member.name}</Tooltip>}\n                                                                >\n                                                                    <Link\n                                                                        to=\"#\"\n                                                                        title={member.name}\n                                                                        data-original-title=\"James Anderson\"\n                                                                        className=\"d-inline-block me-1\"\n                                                                    >\n                                                                        <img\n                                                                            src={member.image}\n                                                                            className=\"rounded-circle avatar-xs\"\n                                                                            alt=\"friend\"\n                                                                        />\n                                                                    </Link>\n                                                                </OverlayTrigger>\n                                                            );\n                                                        })}\n                                                    </div>\n                                                </Form.Group>\n                                            </Col>\n                                            <Col xl={6}>\n                                                <Form.Group className=\"mb-3 mt-3 mt-xl-0\">\n                                                    <Form.Label>Avatar</Form.Label>\n                                                    <p className=\"text-muted font-14\">\n                                                        Recommended thumbnail size 800x400 (px).\n                                                    </p>\n                                                    <FileUploader />\n                                                </Form.Group>\n\n                                                <Form.Group className=\"mb-3\">\n                                                    <Form.Label>Due Date</Form.Label>\n                                                    <HyperDatepicker\n                                                        className=\"form-control\"\n                                                        value={endDate}\n                                                        onChange={(date) => setEndDate(date)}\n                                                    />\n                                                </Form.Group>\n                                            </Col>\n                                        </Row>\n\n                                        <Row className=\"mt-2\">\n                                            <Col>\n                                                <Button type=\"submit\" variant=\"success\">\n                                                    Submit\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </form>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default ProjectForm;\n","import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport avatar1 from 'assets/images/users/avatar-6.jpg';\nimport avatar2 from 'assets/images/users/avatar-7.jpg';\nimport avatar3 from 'assets/images/users/avatar-8.jpg';\nimport avatar4 from 'assets/images/users/avatar-9.jpg';\nimport avatar5 from 'assets/images/users/avatar-10.jpg';\nimport avatar6 from 'assets/images/users/avatar-4.jpg';\nimport avatar7 from 'assets/images/users/avatar-5.jpg';\nimport avatar8 from 'assets/images/users/avatar-1.jpg';\nimport { TeamMember } from '../types';\n\nexport default function useProjectForm() {\n    const [teamMembers] = useState<TeamMember[]>([\n        { value: 'Shreyu N', name: 'Shreyu N', image: avatar2 },\n        { value: 'Greeva N', name: 'Greeva N', image: avatar5 },\n        { value: 'Dhyanu B', name: 'Dhyanu B', image: avatar4 },\n        { value: 'Mannat B', name: 'Mannat B', image: avatar6 },\n        { value: 'Katu S', name: 'Katu S', image: avatar7 },\n        { value: 'Nik N', name: 'Nik N', image: avatar1 },\n        { value: 'Rik N', name: 'Rik N', image: avatar8 },\n    ]);\n\n    const [selectedTeamMembers, setSelectedTeamMembers] = useState<TeamMember[]>([\n        { value: 'Shreyu N', name: 'Shreyu N', image: avatar1 },\n        { value: 'Greeva N', name: 'Greeva N', image: avatar2 },\n        { value: 'Dhyanu B', name: 'Dhyanu B', image: avatar3 },\n    ]);\n\n    /*\n     *  add selected team members\n     */\n    const selectTeamMembers = (e: any[]) => {\n        if (e.length !== 0) {\n            const isAlreadySelected = selectedTeamMembers.filter((x) => x['name'] && x['name'] === e[0].name);\n            if (isAlreadySelected && isAlreadySelected.length === 0) {\n                setSelectedTeamMembers([...selectedTeamMembers, e[0]]);\n            }\n        }\n    };\n\n    /*\n     * form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            name: yup.string().required('Please enter Project Name'),\n        })\n    );\n\n    /*\n     * form methods\n     */\n    const methods = useForm({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    /**\n     * Handle the form submission\n     */\n    const handleValidSubmit = (value: Record<string, string>) => {\n        console.log({ ...value });\n    };\n\n    return {\n        teamMembers,\n        selectedTeamMembers,\n        handleSubmit,\n        register,\n        control,\n        errors,\n        handleValidSubmit,\n        selectTeamMembers,\n    };\n}\n","import { useState, useEffect } from 'react';\nimport Gantt from 'frappe-gantt';\nimport { GanttProjectItem } from '../types';\nimport { projects, tasks as tasksData } from '../Gantt/data';\n\nexport default function useProjectGannt() {\n    const [selectedProject, setSelectedProject] = useState<GanttProjectItem>(projects[1]);\n    const [mode, setMode] = useState<Gantt.viewMode>('Week');\n    const [gantt, setGantt] = useState<Gantt>();\n\n    const modes: Gantt.viewMode[] = ['Quarter Day', 'Half Day', 'Day', 'Week', 'Month'];\n\n    useEffect(() => {\n        // create gantt\n        const gantt = new Gantt('#tasks-gantt', [...tasksData], {\n            view_modes: ['Quarter Day', 'Half Day', 'Day', 'Week', 'Month'],\n            bar_height: 20,\n            padding: 18,\n            view_mode: 'Week',\n            custom_popup_html(task) {\n                return (\n                    '<div class=\"popover fade show bs-popover-right gantt-task-details\" role=\"tooltip\">' +\n                    '<div class=\"arrow\"></div><div class=\"popover-body\">' +\n                    `<h5>${task.name}</h5><p class=\"mb-2\">Expected to finish by ${task.end}</p>` +\n                    '<div class=\"progress mb-2\" style=\"height: 10px;\">' +\n                    `<div class=\"progress-bar\" role=\"progressbar\" style=\"width: ${task.progress}%;\" aria-valuenow=\"${task.progress}\"` +\n                    ` aria-valuemin=\"0\" aria-valuemax=\"100\">${task.progress}%</div>` +\n                    '</div></div></div>'\n                );\n            },\n        });\n        setGantt(gantt);\n    }, []);\n\n    const onSelectProject = (p: GanttProjectItem) => {\n        setSelectedProject(p);\n    };\n\n    /**\n     * On mode change\n     * @param {*} mode\n     */\n    const changeMode = (mode: Gantt.viewMode) => {\n        setMode(mode);\n        if (gantt) {\n            gantt.change_view_mode(mode);\n        }\n    };\n    return {\n        mode,\n        selectedProject,\n        modes,\n        onSelectProject,\n        changeMode,\n    };\n}\n"],"names":["tasks","id","name","start","end","progress","dependencies","projects","status","icon","useState","Date","startDate","setStartDate","endDate","setEndDate","useProjectForm","teamMembers","selectedTeamMembers","handleSubmit","register","control","errors","handleValidSubmit","selectTeamMembers","breadCrumbItems","label","path","active","title","onSubmit","xl","placeholder","containerClass","type","rows","className","value","onChange","date","labelKey","multiple","options","map","member","index","placement","overlay","to","src","image","alt","toString","variant","avatar2","avatar5","avatar4","avatar6","avatar7","avatar1","avatar8","avatar3","setSelectedTeamMembers","schemaResolver","yupResolver","yup","shape","required","methods","useForm","resolver","formState","console","log","e","length","isAlreadySelected","filter","x","useProjectGannt","selectedProject","setSelectedProject","mode","setMode","gantt","setGantt","useEffect","Gantt","tasksData","view_modes","bar_height","padding","view_mode","custom_popup_html","task","modes","onSelectProject","p","changeMode","change_view_mode"],"sourceRoot":""}