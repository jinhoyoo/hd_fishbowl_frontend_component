{"version":3,"file":"static/js/4070.b23a6c9d.chunk.js","mappings":"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","sources":["pages/forms/Validation.tsx","pages/forms/hooks/useFormValidation.ts","pages/forms/hooks/useTypeahead.ts"],"sourcesContent":["import React from 'react';\nimport { Row, Col, Card, Button, InputGroup, Form } from 'react-bootstrap';\nimport { PageTitle } from 'components';\nimport { useFormValidation } from './hooks';\n\nconst FormValidationWithTooltip = () => {\n    const { isValidated, handleSubmit } = useFormValidation();\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mb-3\">Tooltips</h4>\n\n                <Form noValidate validated={isValidated} onSubmit={handleSubmit}>\n                    <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip01\">\n                        <Form.Label>First name</Form.Label>\n                        <Form.Control required type=\"text\" placeholder=\"First name\" defaultValue=\"Mark\" />\n                        <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip02\">\n                        <Form.Label>Last name</Form.Label>\n                        <Form.Control required type=\"text\" placeholder=\"Last name\" defaultValue=\"Otto\" />\n                        <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"position-relative mb-3\" controlId=\"validationCustonTooltipme\">\n                        <Form.Label>Username</Form.Label>\n                        <InputGroup hasValidation>\n                            <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Username\"\n                                aria-describedby=\"inputGroupPrepend\"\n                                required\n                            />\n                            <Form.Control.Feedback type=\"invalid\" tooltip>\n                                Please choose a username.\n                            </Form.Control.Feedback>\n                        </InputGroup>\n                    </Form.Group>\n                    <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip03\">\n                        <Form.Label>City</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"City\" required />\n                        <Form.Control.Feedback type=\"invalid\" tooltip>\n                            Please provide a valid city.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip04\">\n                        <Form.Label>State</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"State\" required />\n                        <Form.Control.Feedback type=\"invalid\" tooltip>\n                            Please provide a valid state.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip05\">\n                        <Form.Label>Zip</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Zip\" required />\n                        <Form.Control.Feedback type=\"invalid\" tooltip>\n                            Please provide a valid zip.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"position-relative mb-3\">\n                        <Form.Check\n                            required\n                            label=\"Agree to terms and conditions\"\n                            feedback=\"You must agree before submitting.\"\n                        />\n                    </Form.Group>\n                    <Button type=\"submit\">Submit form</Button>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FormValidation = () => {\n    const { isValidated, handleSubmit } = useFormValidation();\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/forms/validation' },\n                    { label: 'Form Validation', path: '/forms/validation', active: true },\n                ]}\n                title={'Form Validation'}\n            />\n\n            <Row>\n                <Col lg={6}>\n                    <Card>\n                        <Card.Body>\n                            <Form noValidate validated={isValidated} onSubmit={handleSubmit}>\n                                <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                    <Form.Label>First name</Form.Label>\n                                    <Form.Control required type=\"text\" placeholder=\"First name\" defaultValue=\"Mark\" />\n                                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\" controlId=\"validationCustom02\">\n                                    <Form.Label>Last name</Form.Label>\n                                    <Form.Control required type=\"text\" placeholder=\"Last name\" defaultValue=\"Otto\" />\n                                    <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\" controlId=\"validationCustomUsername\">\n                                    <Form.Label>Username</Form.Label>\n                                    <InputGroup hasValidation>\n                                        <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                                        <Form.Control\n                                            type=\"text\"\n                                            placeholder=\"Username\"\n                                            aria-describedby=\"inputGroupPrepend\"\n                                            required\n                                        />\n                                        <Form.Control.Feedback type=\"invalid\">\n                                            Please choose a username.\n                                        </Form.Control.Feedback>\n                                    </InputGroup>\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\" controlId=\"validationCustom03\">\n                                    <Form.Label>City</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"City\" required />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Please provide a valid city.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\" controlId=\"validationCustom04\">\n                                    <Form.Label>State</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"State\" required />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Please provide a valid state.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\" controlId=\"validationCustom05\">\n                                    <Form.Label>Zip</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"Zip\" required />\n                                    <Form.Control.Feedback type=\"invalid\">\n                                        Please provide a valid zip.\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                <Form.Group className=\"mb-3\">\n                                    <Form.Check\n                                        required\n                                        label=\"Agree to terms and conditions\"\n                                        feedback=\"You must agree before submitting.\"\n                                    />\n                                </Form.Group>\n                                <Button type=\"submit\">Submit form</Button>\n                            </Form>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col lg={6}>\n                    <FormValidationWithTooltip />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default FormValidation;\n","import { useToggle } from 'hooks';\n\nexport default function useFormValidation() {\n    const [isValidated, , setValidated] = useToggle();\n\n    /*\n     * handle form submission\n     */\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        setValidated();\n    };\n\n    return {\n        isValidated,\n        handleSubmit,\n    };\n}\n","import { useState } from 'react';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\ntype TypeaheadOption = string | Record<string, Object>;\n\nexport default function useTypeahead() {\n    const [singleSelections, setSingleSelections] = useState<TypeaheadOption[]>([]);\n    const [multiSelections, setMultiSelections] = useState<TypeaheadOption[]>([]);\n\n    const options: Array<TypeaheadOption> = [\n        { id: 1, value: 'chocolate', label: 'Chocolate' },\n        { id: 2, value: 'strawberry', label: 'Strawberry' },\n        { id: 3, value: 'vanilla', label: 'Vanilla' },\n    ];\n\n    const onChangeSingleSelection = (selected: TypeaheadOption[]) => {\n        setSingleSelections(selected);\n    };\n\n    const onChangeMultipleSelection = (selected: TypeaheadOption[]) => {\n        setMultiSelections(selected);\n    };\n\n    return {\n        options,\n        singleSelections,\n        multiSelections,\n        onChangeSingleSelection,\n        onChangeMultipleSelection,\n    };\n}\n"],"names":["FormValidationWithTooltip","useFormValidation","isValidated","handleSubmit","className","noValidate","validated","onSubmit","controlId","required","type","placeholder","defaultValue","tooltip","hasValidation","id","label","feedback","breadCrumbItems","path","active","title","lg","useToggle","setValidated","event","currentTarget","checkValidity","preventDefault","stopPropagation","useTypeahead","useState","singleSelections","setSingleSelections","multiSelections","setMultiSelections","options","value","onChangeSingleSelection","selected","onChangeMultipleSelection"],"sourceRoot":""}