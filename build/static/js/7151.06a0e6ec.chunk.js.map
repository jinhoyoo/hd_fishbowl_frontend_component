{"version":3,"file":"static/js/7151.06a0e6ec.chunk.js","mappings":"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","sources":["pages/uikit/Offcanvas.tsx","../node_modules/react-bootstrap/esm/OffcanvasBody.js","../node_modules/react-bootstrap/esm/OffcanvasToggling.js","../node_modules/react-bootstrap/esm/OffcanvasHeader.js","../node_modules/react-bootstrap/esm/OffcanvasTitle.js","../node_modules/react-bootstrap/esm/Offcanvas.js"],"sourcesContent":["import { Row, Col, Card, Offcanvas, Button } from 'react-bootstrap';\nimport { useToggle } from 'hooks';\nimport { PageTitle } from 'components';\n\ntype BackdropOption = {\n    name: string;\n    scroll: boolean;\n    backdrop: boolean;\n};\n\ntype PlacementOption = {\n    name: string;\n    placement?: 'start' | 'end' | 'top' | 'bottom';\n};\n\nconst OffCanvasWithBackdrop = ({ name, ...props }: BackdropOption) => {\n    const [isOpen, toggle] = useToggle();\n\n    return (\n        <>\n            <Button variant=\"primary\" onClick={toggle} className=\"me-1\">\n                {name}\n            </Button>\n            <Offcanvas show={isOpen} onHide={toggle} {...props}>\n                <Offcanvas.Header closeButton>\n                    <Offcanvas.Title>Offcanvas</Offcanvas.Title>\n                </Offcanvas.Header>\n                <Offcanvas.Body>\n                    Some text as placeholder. In real life you can have the elements you have chosen. Like, text,\n                    images, lists, etc.\n                </Offcanvas.Body>\n            </Offcanvas>\n        </>\n    );\n};\n\nconst OffcanvasPlacement = ({ name, ...props }: PlacementOption) => {\n    const [isOpen, toggle] = useToggle();\n\n    return (\n        <>\n            <Button variant=\"primary\" onClick={toggle}>\n                Toggle {name} offcanvas\n            </Button>\n            <Offcanvas show={isOpen} onHide={toggle} {...props}>\n                <Offcanvas.Header closeButton>\n                    <Offcanvas.Title>Offcanvas {name}</Offcanvas.Title>\n                </Offcanvas.Header>\n                <Offcanvas.Body>\n                    Content for the offcanvas goes here. You can place just about any Bootstrap component or custom\n                    elements here.\n                </Offcanvas.Body>\n            </Offcanvas>\n        </>\n    );\n};\n\nconst DefaultOffcanvas = () => {\n    const [isOpen, toggle] = useToggle();\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Offcanvas</h4>\n                <p className=\"text-muted font-13\">\n                    <code>Offcanvas</code> includes support for a header with a close button and an optional body class\n                    for some initial padding. We suggest that you include offcanvas headers with dismiss actions\n                    whenever possible, or provide an explicit dismiss action.\n                </p>\n                <Button variant=\"primary\" onClick={toggle}>\n                    Launch\n                </Button>\n\n                <Offcanvas show={isOpen} onHide={toggle}>\n                    <Offcanvas.Header closeButton>\n                        <Offcanvas.Title>Offcanvas</Offcanvas.Title>\n                    </Offcanvas.Header>\n                    <Offcanvas.Body>\n                        Some text as placeholder. In real life you can have the elements you have chosen. Like, text,\n                        images, lists, etc.\n                        <h5 className=\"mt-3\">List</h5>\n                        <ul className=\"ps-3\">\n                            <li className=\"\">Nemo enim ipsam voluptatem quia aspernatur</li>\n                            <li className=\"\">Neque porro quisquam est, qui dolorem</li>\n                            <li className=\"\">Quis autem vel eum iure qui in ea</li>\n                        </ul>\n                        <ul className=\"ps-3\">\n                            <li className=\"\">At vero eos et accusamus et iusto odio dignissimos</li>\n                            <li className=\"\">Et harum quidem rerum facilis</li>\n                            <li className=\"\">Temporibus autem quibusdam et aut officiis</li>\n                        </ul>\n                    </Offcanvas.Body>\n                </Offcanvas>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Offcanvases = () => {\n    const options: BackdropOption[] = [\n        {\n            name: 'Enable body scrolling',\n            scroll: true,\n            backdrop: false,\n        },\n        {\n            name: 'Enable backdrop (default)',\n            scroll: false,\n            backdrop: true,\n        },\n        {\n            name: 'Enable both scrolling & backdrop',\n            scroll: true,\n            backdrop: true,\n        },\n    ];\n\n    const placementOptions: PlacementOption[] = [\n        {\n            name: 'top',\n            placement: 'top',\n        },\n        {\n            name: 'right',\n            placement: 'end',\n        },\n        {\n            name: 'bottom',\n            placement: 'bottom',\n        },\n        {\n            name: 'left',\n            placement: 'start',\n        },\n    ];\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/offcanvas' },\n                    { label: 'Offcanvas', path: '/ui/offcanvas', active: true },\n                ]}\n                title={'Offcanvas'}\n            />\n\n            <Row>\n                <Col className=\"col-6\">\n                    <DefaultOffcanvas />\n\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Offcanvas Placement</h4>\n                            <p className=\"text-muted font-13\">Try the right and bottom examples out below.</p>\n                            <ul>\n                                <li>\n                                    <code>start</code> places offcanvas on the left of the viewport\n                                </li>\n                                <li>\n                                    <code>end</code> places offcanvas on the right of the viewport\n                                </li>\n                                <li>\n                                    <code>bottom</code> places offcanvas on the bottom of the viewport\n                                </li>\n                            </ul>\n                            <div className=\"button-list\">\n                                {placementOptions.map((option, index) => (\n                                    <OffcanvasPlacement\n                                        key={index.toString()}\n                                        placement={option.placement}\n                                        name={option.name}\n                                    />\n                                ))}\n                            </div>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col className=\"col-6\">\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Offcanvas Backdrop</h4>\n                            <p className=\"text-muted font-13\">\n                                Scrolling the <code>&lt;body&gt;</code> element is disabled when an offcanvas and its\n                                backdrop are visible. Use the <code>scroll</code> prop to toggle{' '}\n                                <code>&lt;body&gt;</code> scrolling and <code>backdrop</code> prop to toggle the\n                                backdrop.\n                            </p>\n\n                            {options.map((props, index) => (\n                                <OffCanvasWithBackdrop key={index.toString()} {...props} />\n                            ))}\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Offcanvases;\n","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('offcanvas-body');","import classNames from 'classnames';\nimport * as React from 'react';\nimport { ENTERED, ENTERING, EXITING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport TransitionWrapper from './TransitionWrapper';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false\n};\nconst transitionStyles = {\n  [ENTERING]: 'show',\n  [ENTERED]: 'show'\n};\nconst OffcanvasToggling = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  children,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'offcanvas');\n  return /*#__PURE__*/_jsx(TransitionWrapper, {\n    ref: ref,\n    addEndListener: transitionEndListener,\n    ...props,\n    childRef: children.ref,\n    children: (status, innerProps) => /*#__PURE__*/React.cloneElement(children, { ...innerProps,\n      className: classNames(className, children.props.className, (status === ENTERING || status === EXITING) && `${bsPrefix}-toggling`, transitionStyles[status])\n    })\n  });\n});\nOffcanvasToggling.defaultProps = defaultProps;\nOffcanvasToggling.displayName = 'OffcanvasToggling';\nexport default OffcanvasToggling;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AbstractModalHeader from './AbstractModalHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  closeLabel: 'Close',\n  closeButton: false\n};\nconst OffcanvasHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'offcanvas-header');\n  return /*#__PURE__*/_jsx(AbstractModalHeader, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix)\n  });\n});\nOffcanvasHeader.displayName = 'OffcanvasHeader';\nOffcanvasHeader.defaultProps = defaultProps;\nexport default OffcanvasHeader;","import createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nconst DivStyledAsH5 = divWithClassName('h5');\nexport default createWithBsPrefix('offcanvas-title', {\n  Component: DivStyledAsH5\n});","import classNames from 'classnames';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport * as React from 'react';\nimport { useCallback, useContext, useMemo, useRef } from 'react';\nimport BaseModal from '@restart/ui/Modal';\nimport Fade from './Fade';\nimport OffcanvasBody from './OffcanvasBody';\nimport OffcanvasToggling from './OffcanvasToggling';\nimport ModalContext from './ModalContext';\nimport NavbarContext from './NavbarContext';\nimport OffcanvasHeader from './OffcanvasHeader';\nimport OffcanvasTitle from './OffcanvasTitle';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport BootstrapModalManager, { getSharedManager } from './BootstrapModalManager';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  show: false,\n  backdrop: true,\n  keyboard: true,\n  scroll: false,\n  autoFocus: true,\n  enforceFocus: true,\n  restoreFocus: true,\n  placement: 'start'\n};\n\nfunction DialogTransition(props) {\n  return /*#__PURE__*/_jsx(OffcanvasToggling, { ...props\n  });\n}\n\nfunction BackdropTransition(props) {\n  return /*#__PURE__*/_jsx(Fade, { ...props\n  });\n}\n\nconst Offcanvas = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  children,\n  'aria-labelledby': ariaLabelledby,\n  placement,\n\n  /* BaseModal props */\n  show,\n  backdrop,\n  keyboard,\n  scroll,\n  onEscapeKeyDown,\n  onShow,\n  onHide,\n  container,\n  autoFocus,\n  enforceFocus,\n  restoreFocus,\n  restoreFocusOptions,\n  onEntered,\n  onExit,\n  onExiting,\n  onEnter,\n  onEntering,\n  onExited,\n  backdropClassName,\n  manager: propsManager,\n  ...props\n}, ref) => {\n  const modalManager = useRef();\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'offcanvas');\n  const {\n    onToggle\n  } = useContext(NavbarContext) || {};\n  const handleHide = useEventCallback(() => {\n    onToggle == null ? void 0 : onToggle();\n    onHide == null ? void 0 : onHide();\n  });\n  const modalContext = useMemo(() => ({\n    onHide: handleHide\n  }), [handleHide]);\n\n  function getModalManager() {\n    if (propsManager) return propsManager;\n\n    if (scroll) {\n      // Have to use a different modal manager since the shared\n      // one handles overflow.\n      if (!modalManager.current) modalManager.current = new BootstrapModalManager({\n        handleContainerOverflow: false\n      });\n      return modalManager.current;\n    }\n\n    return getSharedManager();\n  }\n\n  const handleEnter = (node, ...args) => {\n    if (node) node.style.visibility = 'visible';\n    onEnter == null ? void 0 : onEnter(node, ...args);\n  };\n\n  const handleExited = (node, ...args) => {\n    if (node) node.style.visibility = '';\n    onExited == null ? void 0 : onExited(...args);\n  };\n\n  const renderBackdrop = useCallback(backdropProps => /*#__PURE__*/_jsx(\"div\", { ...backdropProps,\n    className: classNames(`${bsPrefix}-backdrop`, backdropClassName)\n  }), [backdropClassName, bsPrefix]);\n\n  const renderDialog = dialogProps => /*#__PURE__*/_jsx(\"div\", {\n    role: \"dialog\",\n    ...dialogProps,\n    ...props,\n    className: classNames(className, bsPrefix, `${bsPrefix}-${placement}`),\n    \"aria-labelledby\": ariaLabelledby,\n    children: children\n  });\n\n  return /*#__PURE__*/_jsx(ModalContext.Provider, {\n    value: modalContext,\n    children: /*#__PURE__*/_jsx(BaseModal, {\n      show: show,\n      ref: ref,\n      backdrop: backdrop,\n      container: container,\n      keyboard: keyboard,\n      autoFocus: autoFocus,\n      enforceFocus: enforceFocus && !scroll,\n      restoreFocus: restoreFocus,\n      restoreFocusOptions: restoreFocusOptions,\n      onEscapeKeyDown: onEscapeKeyDown,\n      onShow: onShow,\n      onHide: handleHide,\n      onEnter: handleEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExiting: onExiting,\n      onExited: handleExited,\n      manager: getModalManager(),\n      transition: DialogTransition,\n      backdropTransition: BackdropTransition,\n      renderBackdrop: renderBackdrop,\n      renderDialog: renderDialog\n    })\n  });\n});\nOffcanvas.displayName = 'Offcanvas';\nOffcanvas.defaultProps = defaultProps;\nexport default Object.assign(Offcanvas, {\n  Body: OffcanvasBody,\n  Header: OffcanvasHeader,\n  Title: OffcanvasTitle\n});"],"names":["OffCanvasWithBackdrop","name","props","useToggle","isOpen","toggle","variant","onClick","className","show","onHide","closeButton","OffcanvasPlacement","DefaultOffcanvas","breadCrumbItems","label","path","active","title","placement","map","option","index","toString","scroll","backdrop","createWithBsPrefix","transitionStyles","ENTERING","ENTERED","OffcanvasToggling","React","ref","bsPrefix","children","useBootstrapPrefix","_jsx","TransitionWrapper","addEndListener","transitionEndListener","childRef","status","innerProps","classNames","EXITING","defaultProps","in","mountOnEnter","unmountOnExit","appear","displayName","OffcanvasHeader","AbstractModalHeader","closeLabel","DivStyledAsH5","divWithClassName","Component","DialogTransition","BackdropTransition","Fade","Offcanvas","ariaLabelledby","keyboard","onEscapeKeyDown","onShow","container","autoFocus","enforceFocus","restoreFocus","restoreFocusOptions","onEntered","onExit","onExiting","onEnter","onEntering","onExited","backdropClassName","propsManager","manager","modalManager","useRef","onToggle","useContext","NavbarContext","handleHide","useEventCallback","modalContext","useMemo","renderBackdrop","useCallback","backdropProps","ModalContext","value","BaseModal","node","style","visibility","args","current","BootstrapModalManager","handleContainerOverflow","getSharedManager","transition","backdropTransition","renderDialog","dialogProps","role","Object","assign","Body","OffcanvasBody","Header","Title","OffcanvasTitle"],"sourceRoot":""}