{"version":3,"file":"static/js/5936.8161bf33.chunk.js","mappings":"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","sources":["pages/apps/Tasks/Board/Task.tsx","pages/apps/Tasks/Board/Kanban.tsx"],"sourcesContent":["import { Card, Dropdown } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { KanbanTaskItem } from '../types';\n\ntype TaskItemProps = {\n    task: KanbanTaskItem;\n};\n\nconst TaskItem = ({ task }: TaskItemProps) => {\n    return (\n        <Card className=\"mb-0\">\n            <Card.Body className=\"p-3\">\n                <small className=\"float-end text-muted\">{task.dueDate}</small>\n                <span\n                    className={classNames('badge', {\n                        'bg-danger': task.priority === 'High',\n                        'bg-secondary': task.priority === 'Medium',\n                        'bg-success': task.priority === 'Low',\n                    })}\n                >\n                    {task.priority}\n                </span>\n\n                <h5 className=\"mt-2 mb-2\">\n                    <Link to=\"#\" className=\"text-body\">\n                        {task.title}\n                    </Link>\n                </h5>\n\n                <p className=\"mb-0\">\n                    <span className=\"pe-2 text-nowrap mb-2 d-inline-block\">\n                        <i className=\"mdi mdi-briefcase-outline text-muted\"></i> {task.project}\n                    </span>\n                    <span className=\"text-nowrap mb-2 d-inline-block\">\n                        <i className=\"mdi mdi-comment-multiple-outline text-muted\"></i> <b>{task.totalComments}</b>{' '}\n                        Comments\n                    </span>\n                </p>\n\n                <Dropdown className=\"float-end\" align=\"end\">\n                    <Dropdown.Toggle\n                        variant=\"link\"\n                        className=\"text-muted card-drop arrow-none cursor-pointer p-0 shadow-none\"\n                    >\n                        <i className=\"mdi mdi-dots-vertical font-18\"></i>\n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu>\n                        <Dropdown.Item>\n                            <i className=\"mdi mdi-pencil me-1\"></i>Edit\n                        </Dropdown.Item>\n                        <Dropdown.Item>\n                            <i className=\"mdi mdi-delete me-1\"></i>Delete\n                        </Dropdown.Item>\n                        <Dropdown.Item>\n                            <i className=\"mdi mdi-plus-circle-outline me-1\"></i>Add People\n                        </Dropdown.Item>\n                        <Dropdown.Item>\n                            <i className=\"mdi mdi-exit-to-app me-1\"></i>Leave\n                        </Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n\n                <p className=\"mb-0\">\n                    <img src={task.userAvatar} alt={task.user} className=\"avatar-xs rounded-circle me-1\" />\n                    <span className=\"align-middle\">{task.user}</span>\n                </p>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default TaskItem;\n","import { Row, Col, OverlayTrigger, Tooltip, Modal, Button } from 'react-bootstrap';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { FormInput, HyperDatepicker, PageTitle } from 'components';\nimport TaskItem from './Task';\nimport { useKanban } from '../hooks';\n\nconst Kanban = () => {\n    const {\n        state,\n        register,\n        control,\n        errors,\n        handleSubmit,\n        toggleNewTaskModal,\n        newTask,\n        onDragEnd,\n        handleDateChange,\n        handleNewTask,\n    } = useKanban();\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Tasks', path: 'apps/tasks/kanban' },\n                    { label: 'Kanban', path: 'apps/tasks/kanban', active: true },\n                ]}\n                title={'Kanban'}\n            />\n            <Row>\n                <Col>\n                    <DragDropContext onDragEnd={onDragEnd}>\n                        <div className=\"board\">\n                            {/* todo */}\n                            <Droppable droppableId=\"todoTasks\">\n                                {(provided, snapshot) => (\n                                    <div className=\"tasks\" ref={provided.innerRef}>\n                                        <OverlayTrigger\n                                            key=\"bottom\"\n                                            placement=\"bottom\"\n                                            overlay={<Tooltip>Add New Todo Task</Tooltip>}\n                                        >\n                                            <button\n                                                className=\"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\"\n                                                id=\"addNewTodo\"\n                                                onClick={() => newTask('Pending', 'todoTasks')}\n                                            >\n                                                <i className=\"mdi mdi-plus\"></i>\n                                            </button>\n                                        </OverlayTrigger>\n\n                                        <h5 className=\"mt-0 task-header\">TODO ({state.todoTasks.length})</h5>\n\n                                        {state.todoTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        {state.todoTasks.map((item, index) => (\n                                            <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                {(provided, snapshot) => (\n                                                    <div\n                                                        ref={provided.innerRef}\n                                                        {...provided.draggableProps}\n                                                        {...provided.dragHandleProps}\n                                                    >\n                                                        <TaskItem task={item} />\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n\n                            {/* in progress */}\n                            <Droppable droppableId=\"inprogressTasks\">\n                                {(provided, snapshot) => (\n                                    <div ref={provided.innerRef} className=\"tasks\">\n                                        <OverlayTrigger\n                                            key=\"bottom\"\n                                            placement=\"bottom\"\n                                            overlay={<Tooltip>Add New In-progress Task</Tooltip>}\n                                        >\n                                            <button\n                                                className=\"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\"\n                                                id=\"addInprogressTask\"\n                                                onClick={() => newTask('Inprogress', 'inprogressTasks')}\n                                            >\n                                                <i className=\"mdi mdi-plus\"></i>\n                                            </button>\n                                        </OverlayTrigger>\n\n                                        <h5 className=\"mt-0 task-header text-uppercase\">\n                                            In Progress ({state.inprogressTasks.length})\n                                        </h5>\n                                        {state.inprogressTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        {state.inprogressTasks.map((item, index) => (\n                                            <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                {(provided, snapshot) => (\n                                                    <div\n                                                        ref={provided.innerRef}\n                                                        {...provided.draggableProps}\n                                                        {...provided.dragHandleProps}\n                                                    >\n                                                        <TaskItem task={item} />\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n\n                            {/* review */}\n                            <Droppable droppableId=\"reviewTasks\">\n                                {(provided, snapshot) => (\n                                    <div ref={provided.innerRef} className=\"tasks\">\n                                        <OverlayTrigger\n                                            key=\"bottom\"\n                                            placement=\"bottom\"\n                                            overlay={<Tooltip>Add New Review Task</Tooltip>}\n                                        >\n                                            <button\n                                                className=\"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\"\n                                                id=\"addReviewTask\"\n                                                onClick={() => newTask('Review', 'reviewTasks')}\n                                            >\n                                                <i className=\"mdi mdi-plus\"></i>\n                                            </button>\n                                        </OverlayTrigger>\n\n                                        <h5 className=\"mt-0 task-header text-uppercase\">\n                                            Review ({state.reviewTasks.length})\n                                        </h5>\n                                        {state.reviewTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        {state.reviewTasks.map((item, index) => (\n                                            <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                {(provided, snapshot) => (\n                                                    <div\n                                                        ref={provided.innerRef}\n                                                        {...provided.draggableProps}\n                                                        {...provided.dragHandleProps}\n                                                    >\n                                                        <TaskItem task={item} />\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n\n                            {/* done */}\n                            <Droppable droppableId=\"doneTasks\">\n                                {(provided, snapshot) => (\n                                    <div ref={provided.innerRef} className=\"tasks\">\n                                        <OverlayTrigger\n                                            key=\"bottom\"\n                                            placement=\"bottom\"\n                                            overlay={<Tooltip>Add New Completed Task</Tooltip>}\n                                        >\n                                            <button\n                                                className=\"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\"\n                                                id=\"addNewDone\"\n                                                onClick={() => newTask('Done', 'doneTasks')}\n                                            >\n                                                <i className=\"mdi mdi-plus\"></i>\n                                            </button>\n                                        </OverlayTrigger>\n\n                                        <h5 className=\"mt-0 task-header text-uppercase\">\n                                            Done ({state.doneTasks.length})\n                                        </h5>\n                                        {state.doneTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        {state.doneTasks.map((item, index) => (\n                                            <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                {(provided, snapshot) => (\n                                                    <div\n                                                        ref={provided.innerRef}\n                                                        {...provided.draggableProps}\n                                                        {...provided.dragHandleProps}\n                                                    >\n                                                        <TaskItem task={item} />\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n                        </div>\n                    </DragDropContext>\n                </Col>\n            </Row>\n\n            {/* new task model */}\n            {state.newTask && (\n                <Modal show={state.newTaskModal} onHide={toggleNewTaskModal} size=\"lg\" centered>\n                    <Modal.Header closeButton>\n                        <h4 className=\"modal-title\">Create New Task</h4>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <form onSubmit={handleSubmit(handleNewTask)} className=\"p-2\">\n                            <FormInput\n                                name=\"project\"\n                                label=\"Project\"\n                                type=\"select\"\n                                containerClass=\"mb-3\"\n                                className=\"form-select form-control-light\"\n                                register={register}\n                                key=\"project\"\n                                errors={errors}\n                                control={control}\n                            >\n                                <option value=\"-1\">Select</option>\n                                <option>Hyper</option>\n                                <option>CRM</option>\n                                <option>iOS App</option>\n                            </FormInput>\n\n                            <Row>\n                                <Col md={8}>\n                                    <FormInput\n                                        name=\"title\"\n                                        label=\"Title\"\n                                        placeholder=\"Enter title\"\n                                        type=\"text\"\n                                        containerClass=\"mb-3\"\n                                        className=\"form-control form-control-light\"\n                                        register={register}\n                                        key=\"title\"\n                                        errors={errors}\n                                        control={control}\n                                    />\n                                </Col>\n                                <Col md={4}>\n                                    <FormInput\n                                        name=\"priority\"\n                                        label=\"Priority\"\n                                        type=\"select\"\n                                        containerClass=\"mb-3\"\n                                        className=\"form-select form-control-light\"\n                                        register={register}\n                                        key=\"priority\"\n                                        errors={errors}\n                                        control={control}\n                                    >\n                                        <option value={-1}>Select</option>\n                                        <option value=\"Low\">Low</option>\n                                        <option value=\"Medium\">Medium</option>\n                                        <option value=\"High\">High</option>\n                                    </FormInput>\n                                </Col>\n                            </Row>\n\n                            <FormInput\n                                name=\"description\"\n                                label=\"Description\"\n                                type=\"textarea\"\n                                containerClass=\"mb-3\"\n                                className=\"form-control form-control-light\"\n                                rows=\"3\"\n                                register={register}\n                                key=\"description\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <Row>\n                                <Col md={6}>\n                                    <FormInput\n                                        name=\"user\"\n                                        label=\"Assign To\"\n                                        type=\"select\"\n                                        containerClass=\"mb-3\"\n                                        className=\"form-select form-control-light\"\n                                        register={register}\n                                        key=\"user\"\n                                        errors={errors}\n                                        control={control}\n                                    >\n                                        <option>Select</option>\n                                        <option>Coderthemes</option>\n                                        <option>Robert Carlile</option>\n                                        <option>Louis Allen</option>\n                                        <option>Sean White</option>\n                                        <option>Riley Steele</option>\n                                        <option>Zak Turnbull</option>\n                                    </FormInput>\n                                </Col>\n                                <Col md={6}>\n                                    <div className=\"form-group\">\n                                        <label className=\"form-label\">Due Date</label> <br />\n                                        <HyperDatepicker\n                                            hideAddon={true}\n                                            dateFormat=\"yyyy-MM-dd\"\n                                            value={state.newTask.dueDate}\n                                            onChange={(date) => {\n                                                handleDateChange(date);\n                                            }}\n                                        />\n                                    </div>\n                                </Col>\n                            </Row>\n\n                            <div className=\"text-end\">\n                                <Button variant=\"light\" type=\"button\" className=\"me-1\" onClick={toggleNewTaskModal}>\n                                    Cancel\n                                </Button>\n                                <Button variant=\"primary\" type=\"submit\">\n                                    Create\n                                </Button>\n                            </div>\n                        </form>\n                    </Modal.Body>\n                </Modal>\n            )}\n        </>\n    );\n};\n\nexport { Kanban };\n"],"names":["task","Card","className","dueDate","classNames","priority","to","title","project","totalComments","Dropdown","align","variant","src","userAvatar","alt","user","Kanban","useKanban","state","register","control","errors","handleSubmit","toggleNewTaskModal","newTask","onDragEnd","handleDateChange","handleNewTask","breadCrumbItems","label","path","active","Row","Col","droppableId","provided","snapshot","ref","innerRef","OverlayTrigger","placement","overlay","Tooltip","id","onClick","todoTasks","length","map","item","index","draggableId","draggableProps","dragHandleProps","Task","placeholder","inprogressTasks","reviewTasks","doneTasks","Modal","show","newTaskModal","onHide","size","centered","closeButton","onSubmit","name","type","containerClass","value","md","rows","hideAddon","dateFormat","onChange","date","Button"],"sourceRoot":""}