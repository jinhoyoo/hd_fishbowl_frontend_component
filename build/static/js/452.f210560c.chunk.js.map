{"version":3,"file":"static/js/452.f210560c.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/SplitButton.js","pages/uikit/Dropdowns.tsx","../node_modules/react-bootstrap/esm/ButtonGroup.js","../node_modules/react-bootstrap/esm/DropdownButton.js","../node_modules/react-bootstrap/esm/types.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   * @required\n   */\n  id: PropTypes.string,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nconst defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\n/**\n * A convenience component for simple or general use split button dropdowns. Renders a\n * `ButtonGroup` containing a `Button` and a `Button` toggle for the `Dropdown`. All `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of [`Dropdown`'s\n * props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._\n * The Button `variant`, `size` and `bsPrefix` props are passed to the button and toggle,\n * and menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst SplitButton = /*#__PURE__*/React.forwardRef(({\n  id,\n  bsPrefix,\n  size,\n  variant,\n  title,\n  type,\n  toggleLabel,\n  children,\n  onClick,\n  href,\n  target,\n  menuRole,\n  renderMenuOnMount,\n  rootCloseEvent,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  as: ButtonGroup,\n  children: [/*#__PURE__*/_jsx(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type,\n    children: title\n  }), /*#__PURE__*/_jsx(Dropdown.Toggle, {\n    split: true,\n    id: id,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix,\n    children: /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: toggleLabel\n    })\n  }), /*#__PURE__*/_jsx(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    children: children\n  })]\n}));\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","import { Row, Col, Card, Dropdown, DropdownButton, SplitButton, ButtonGroup } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { PageTitle } from 'components';\nimport { Variant } from './types';\n\nconst colors: Variant[] = [\n    {\n        name: 'Primary',\n        color: 'primary',\n    },\n    {\n        name: 'Secondary',\n        color: 'secondary',\n    },\n    {\n        name: 'Success',\n        color: 'success',\n    },\n    {\n        name: 'Info',\n        color: 'info',\n    },\n    {\n        name: 'Warning',\n        color: 'warning',\n    },\n    {\n        name: 'Danger',\n        color: 'danger',\n    },\n];\n\nconst SingleButtonDropdown = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Single button dropdowns</h4>\n                <p className=\"text-muted font-14\">\n                    You can use <code>DropdownButton</code> to create a simple dropdown. Also, you can use prop{' '}\n                    <code>as</code> to create custom element typeof dropdown.\n                </p>\n\n                <Row>\n                    <Col className=\"col-auto\">\n                        <DropdownButton variant=\"light\" title=\"Dropdown button\">\n                            <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                            <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                        </DropdownButton>\n                    </Col>\n                    <Col className=\"col-auto\">\n                        <Dropdown>\n                            <Dropdown.Toggle as={Link} to=\"#\" className=\"btn btn-secondary\" id=\"dropdown-basic\">\n                                Dropdown link\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu>\n                                <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DropdownMenuAlignment = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Menu alignment</h4>\n                <p className=\"text-muted font-14\">\n                    Passing <code>right</code> to the <code>menuAligh</code> prop on the\n                    <code> DropdownButton</code> to right align the dropdown menu.\n                </p>\n\n                <DropdownButton variant=\"light\" align=\"end\" title=\"Right-aligned menut\">\n                    <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                    <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                    <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                </DropdownButton>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ColorVariantButtonDropdown = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Variant</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    The best part is you can do this with any button variant, too:\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <Dropdown key={index.toString()} as={ButtonGroup} className=\"me-1\">\n                            <Dropdown.Toggle variant={color.color}>{color.name}</Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                                <Dropdown.Divider />\n                                <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst AnimatedButtonDropdown = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Animated Dropdown</h4>\n                <p className=\"text-muted font-14\">\n                    Add <code>.dropdown-menu-animated</code> to a <code>Dropdown.Menu</code> to have animated dropdown\n                    menu.\n                </p>\n                <Dropdown>\n                    <Dropdown.Toggle variant=\"light\">Animated Dropdown</Dropdown.Toggle>\n                    <Dropdown.Menu className=\"dropdown-menu-animated\">\n                        <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                        <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                        <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DropupVariationDropdowns = () => {\n    const variations = [\n        {\n            type: DropdownButton,\n            name: 'Dropup',\n        },\n        {\n            type: SplitButton,\n            name: 'Split dropup',\n        },\n    ];\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Dropup variation</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Trigger dropdown menus above of their toggle elements, with the <code>drop</code> prop.\n                </p>\n                {variations.map((item, index) => (\n                    <item.type\n                        as={ButtonGroup}\n                        key={index.toString()}\n                        drop=\"up\"\n                        title={item.name}\n                        variant=\"light\"\n                        className=\"me-1\"\n                    >\n                        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                    </item.type>\n                ))}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DropstartVariationDropdowns = () => {\n    const variations = [\n        {\n            type: DropdownButton,\n            name: 'Dropstart',\n        },\n        {\n            type: SplitButton,\n            name: 'Split dropstart',\n        },\n    ];\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Dropup variation</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Trigger dropdown menus left of their toggle elements, with the <code>drop</code> prop.\n                </p>\n                {variations.map((item, index) => (\n                    <item.type\n                        as={ButtonGroup}\n                        key={index.toString()}\n                        drop=\"start\"\n                        title={item.name}\n                        variant=\"secondary\"\n                        className=\"me-1\"\n                    >\n                        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                    </item.type>\n                ))}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DropendVariationDropdowns = () => {\n    const variations = [\n        {\n            type: DropdownButton,\n            name: 'Dropend',\n        },\n        {\n            type: SplitButton,\n            name: 'Split dropend',\n        },\n    ];\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Dropup variation</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    Trigger dropdown menus right of their toggle elements, with the <code>drop</code> prop.\n                </p>\n                {variations.map((item, index) => (\n                    <item.type\n                        as={ButtonGroup}\n                        key={index.toString()}\n                        drop=\"end\"\n                        title={item.name}\n                        variant=\"primary\"\n                        className=\"me-1\"\n                    >\n                        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                    </item.type>\n                ))}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst SplitColorVariantButtonDropdown = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Split button dropdowns</h4>\n                <p className=\"text-muted font-14 mb-3\">\n                    You can split button dropdowns by adding <code>SplitButton</code>.\n                </p>\n\n                {colors.map((color, index) => {\n                    return (\n                        <SplitButton\n                            key={index.toString()}\n                            variant={color.color}\n                            title={color.name}\n                            className=\"me-1 mb-1\"\n                        >\n                            <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                            <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                            <Dropdown.Divider />\n                            <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                        </SplitButton>\n                    );\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ButtonDropdownSizes = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Sizing</h4>\n                <p className=\"text-muted font-14\">\n                    Button dropdowns work with buttons of all sizes, including default and split dropdown buttons.\n                </p>\n\n                {[DropdownButton, SplitButton].map((DropdownType, index) => (\n                    <DropdownType\n                        as={ButtonGroup}\n                        className=\"me-1\"\n                        key={index.toString()}\n                        size=\"lg\"\n                        title=\"Large button\"\n                        variant=\"light\"\n                    >\n                        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                    </DropdownType>\n                ))}\n                {[DropdownButton, SplitButton].map((DropdownType, index) => (\n                    <DropdownType\n                        as={ButtonGroup}\n                        className=\"me-1\"\n                        key={index.toString()}\n                        size=\"sm\"\n                        title=\"Small button\"\n                        variant=\"light\"\n                    >\n                        <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n                    </DropdownType>\n                ))}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ActiveItemDropdown = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Active Item</h4>\n\n                <p className=\"text-muted font-14\">\n                    Add <code>active</code> prop to item in the dropdown to <strong>style them as active</strong>.\n                </p>\n\n                <Dropdown>\n                    <Dropdown.Toggle variant=\"secondary\">Active Item</Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Regular link</Dropdown.Item>\n                        <Dropdown.Item active>Active link</Dropdown.Item>\n                        <Dropdown.Item>Another link</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DisabledItemDropdown = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Disabled Item</h4>\n\n                <p className=\"text-muted font-14\">\n                    Add <code>disabled</code> prop to item in the dropdown to <strong>style them as disabled</strong>.\n                </p>\n\n                <Dropdown>\n                    <Dropdown.Toggle>Active Item</Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Regular link</Dropdown.Item>\n                        <Dropdown.Item disabled>Disabled link</Dropdown.Item>\n                        <Dropdown.Item>Another link</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DropdownWithHeader = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Headers</h4>\n\n                <p className=\"text-muted font-14\">Add a header to label sections of actions.</p>\n\n                <Dropdown>\n                    <Dropdown.Toggle variant=\"secondary\">Header</Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        <Dropdown.Header>Dropdown header</Dropdown.Header>\n                        <Dropdown.Item>Action</Dropdown.Item>\n                        <Dropdown.Item>Another action</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DropdownWithText = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Text</h4>\n\n                <p className=\"text-muted font-14\">\n                    Place any freeform text within a dropdown menu with text and use spacing utilities. Note that you’ll\n                    likely need additional sizing styles to constrain the menu width.\n                </p>\n\n                <Dropdown>\n                    <Dropdown.Toggle>Text Dropdown</Dropdown.Toggle>\n                    <Dropdown.Menu className=\"p-3 text-muted\" style={{ maxWidth: '200px' }}>\n                        <p>Some example text that's free-flowing within the dropdown menu.</p>\n                        <p className=\"mb-0\">And this is more example text.</p>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst CustomDropdown = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Forms</h4>\n\n                <p className=\"text-muted font-14\">\n                    Put a form within a dropdown menu, or make it into a dropdown menu, and use margin or padding\n                    utilities to give it the negative space you require.\n                </p>\n\n                <Dropdown>\n                    <Dropdown.Toggle variant=\"secondary\">Form</Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        <form className=\"px-4 py-3\">\n                            <div className=\"mb-3\">\n                                <label htmlFor=\"exampleDropdownFormEmail1\" className=\"form-label\">\n                                    Email address\n                                </label>\n                                <input\n                                    type=\"email\"\n                                    className=\"form-control\"\n                                    id=\"exampleDropdownFormEmail1\"\n                                    placeholder=\"email@example.com\"\n                                />\n                            </div>\n                            <div className=\"mb-3\">\n                                <label htmlFor=\"exampleDropdownFormPassword1\" className=\"form-label\">\n                                    Password\n                                </label>\n                                <input\n                                    type=\"password\"\n                                    className=\"form-control\"\n                                    id=\"exampleDropdownFormPassword1\"\n                                    placeholder=\"Password\"\n                                />\n                            </div>\n                            <div className=\"mb-2\">\n                                <div className=\"form-check\">\n                                    <input type=\"checkbox\" className=\"form-check-input\" id=\"dropdownCheck\" />\n                                    <label className=\"form-check-label\" htmlFor=\"dropdownCheck\">\n                                        Remember me\n                                    </label>\n                                </div>\n                            </div>\n                            <button type=\"submit\" className=\"btn btn-primary\">\n                                Sign in\n                            </button>\n                        </form>\n                        <Dropdown.Divider />\n                        <Dropdown.Item eventKey=\"4\">New around here? Sign up</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"4\">Forgot password?</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Dropdowns = () => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/dropdowns' },\n                    { label: 'Dropdowns', path: '/ui/dropdowns', active: true },\n                ]}\n                title={'Dropdowns'}\n            />\n\n            <Row>\n                <Col lg={6}>\n                    <SingleButtonDropdown />\n                    <ColorVariantButtonDropdown />\n                    <AnimatedButtonDropdown />\n                    <DropupVariationDropdowns />\n                    <DropendVariationDropdowns />\n                    <DisabledItemDropdown />\n                    <DropdownWithText />\n                </Col>\n\n                <Col lg={6}>\n                    <DropdownMenuAlignment />\n                    <SplitColorVariantButtonDropdown />\n                    <ButtonDropdownSizes />\n                    <DropstartVariationDropdowns />\n                    <ActiveItemDropdown />\n                    <DropdownWithHeader />\n                    <CustomDropdown />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Dropdowns;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  vertical: false,\n  role: 'group'\n};\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, { ...rest,\n    ref: ref,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */\n  id: PropTypes.string,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n}), PropTypes.object]);"],"names":["propTypes","id","PropTypes","toggleLabel","href","target","onClick","title","type","disabled","align","alignPropType","menuRole","renderMenuOnMount","rootCloseEvent","bsPrefix","variant","size","SplitButton","React","ref","children","props","_jsxs","Dropdown","as","ButtonGroup","_jsx","Button","split","childBsPrefix","className","role","renderOnMount","defaultProps","displayName","colors","name","color","SingleButtonDropdown","Card","Row","Col","DropdownButton","Link","to","DropdownMenuAlignment","ColorVariantButtonDropdown","map","index","toString","AnimatedButtonDropdown","DropupVariationDropdowns","variations","item","drop","eventKey","DropstartVariationDropdowns","DropendVariationDropdowns","SplitColorVariantButtonDropdown","ButtonDropdownSizes","DropdownType","ActiveItemDropdown","active","DisabledItemDropdown","DropdownWithHeader","DropdownWithText","style","maxWidth","CustomDropdown","htmlFor","placeholder","breadCrumbItems","label","path","lg","vertical","Component","rest","prefix","useBootstrapPrefix","baseClass","classNames","menuVariant","DropdownToggle","DropdownMenu","alignDirection","sm","md","xl","xxl"],"sourceRoot":""}