{"version":3,"file":"static/js/6547.0808b09f.chunk.js","mappings":"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","sources":["pages/uikit/RangeSliders.tsx","pages/uikit/hooks/useModal.ts","pages/uikit/hooks/useRangeSlider.ts"],"sourcesContent":["import { Row, Col, Card } from 'react-bootstrap';\nimport Nouislider from 'nouislider-react';\nimport 'nouislider/distribute/nouislider.css';\nimport { PageTitle } from 'components';\nimport { useRangeSlider } from './hooks';\n\nconst RangeSliders = () => {\n    const { selectedVals, selectedRanges, onSlide, onSlide2 } = useRangeSlider();\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Extended UI', path: '/ui/rangesliders' },\n                    { label: 'Range Sliders', path: '/ui/rangesliders', active: true },\n                ]}\n                title={'Range Sliders'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Single</h4>\n                            <p className=\"text-muted font-14\">Slider with single selecrtor</p>\n\n                            <Nouislider\n                                range={{ min: 0, max: 100 }}\n                                start={[20]}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide(1, value, percent)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value:{' '}\n                                {selectedVals ? (\n                                    <span>\n                                        {selectedVals[1]['textValue']}, &nbsp;\n                                        {selectedVals[1]['percent']}%\n                                    </span>\n                                ) : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Range</h4>\n                            <p className=\"text-muted font-14\">Slider with range selecrtor</p>\n\n                            <Nouislider\n                                range={{ min: 10, max: 150 }}\n                                start={[20, 45]}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide2(1, value)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value: {selectedRanges ? <span>{selectedRanges[1]}</span> : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Slider Step</h4>\n                            <p className=\"text-muted font-14\">Slider with step value</p>\n\n                            <Nouislider\n                                range={{ min: 0, max: 100 }}\n                                start={[20]}\n                                step={10}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide(2, value, percent)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value:{' '}\n                                {selectedVals ? (\n                                    <span>\n                                        {selectedVals[2]['textValue']}, &nbsp;\n                                        {selectedVals[2]['percent']}%\n                                    </span>\n                                ) : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Range Slider with Steps</h4>\n                            <p className=\"text-muted font-14\">Slider with range selecrtor with fixed step value</p>\n\n                            <Nouislider\n                                range={{ min: 10, max: 150 }}\n                                start={[20, 45]}\n                                step={15}\n                                connect\n                                onSlide={(render, handle, value, un, percent) => onSlide2(2, value)}\n                            />\n                            <p className=\"mt-2 mb-0\">\n                                Value: {selectedRanges ? <span>{selectedRanges[2]}</span> : null}\n                            </p>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default RangeSliders;\n","import { useToggle } from 'hooks';\nimport { useState } from 'react';\n\nexport default function useModal() {\n    const [isOpen, toggleModal] = useToggle();\n\n    const [size, setSize] = useState<'sm' | 'lg' | 'xl'>();\n    const [className, setClassName] = useState<string>('');\n    const [scroll, setScroll] = useState<boolean>(false);\n\n    // Opens large modal\n    const openModalWithSize = (size: 'sm' | 'lg' | 'xl') => {\n        setSize(size);\n        setClassName('');\n        setScroll(false);\n        toggleModal();\n    };\n\n    // Opens modal with custom class\n    const openModalWithClass = (className: string) => {\n        setClassName(className);\n        setScroll(false);\n        toggleModal();\n    };\n\n    // Opens large modal\n    const openModalWithScroll = () => {\n        setScroll(true);\n        setSize('sm');\n        setClassName('');\n        toggleModal();\n    };\n\n    return {\n        isOpen,\n        size,\n        className,\n        scroll,\n        toggleModal,\n        openModalWithSize,\n        openModalWithClass,\n        openModalWithScroll,\n    };\n}\n","import { useState } from 'react';\n\ntype SelectedValsType = {\n    [key: number]: { textValue: number; percent: number };\n};\n\ntype SelectedRangesType = {\n    [key: number]: string;\n};\n\nexport default function useRangeSlider() {\n    const [selectedVals, setSelectedVals] = useState<SelectedValsType>({\n        '1': { textValue: 20, percent: 20 },\n        '2': { textValue: 20, percent: 20 },\n    });\n    const [selectedRanges, setSelectedRanges] = useState<SelectedRangesType>({\n        '1': '20-45',\n        '2': '20-45',\n    });\n\n    const onSlide = (index: number, value: number[], percent: number[]) => {\n        let selectedValues = { ...selectedVals };\n        selectedValues[index] = {\n            textValue: Number(value[0].toFixed(2)),\n            percent: Number(percent[0].toFixed(2)),\n        };\n        setSelectedVals(selectedValues);\n    };\n\n    const onSlide2 = (index: number, value: number[]) => {\n        let selectedRange = { ...selectedRanges };\n        selectedRange[index] = value[0].toFixed(2) + '-' + value[1].toFixed(2);\n        setSelectedRanges(selectedRange);\n    };\n\n    return {\n        selectedVals,\n        selectedRanges,\n        onSlide,\n        onSlide2,\n    };\n}\n"],"names":["useRangeSlider","selectedVals","selectedRanges","onSlide","onSlide2","breadCrumbItems","label","path","active","title","xl","className","range","min","max","start","connect","render","handle","value","un","percent","step","useModal","useToggle","isOpen","toggleModal","useState","size","setSize","setClassName","scroll","setScroll","openModalWithSize","openModalWithClass","openModalWithScroll","textValue","setSelectedVals","setSelectedRanges","index","selectedValues","Number","toFixed","selectedRange"],"sourceRoot":""}