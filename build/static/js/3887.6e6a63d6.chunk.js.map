{"version":3,"file":"static/js/3887.6e6a63d6.chunk.js","mappings":"uNAIMA,EAAQ,WACV,IAAMC,GACF,UAAC,IAAD,CAASC,GAAG,gBAAZ,WACI,SAAC,WAAD,CAAgBC,GAAG,KAAnB,4BACA,SAAC,SAAD,6EAIR,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIC,UAAU,eAAd,6BACA,cAAGA,UAAU,qBAAb,4JAIA,SAAC,IAAD,CAAgBC,QAAQ,QAAQC,UAAU,QAAQC,QAASN,EAA3D,UACI,SAAC,IAAD,CAAQO,QAAQ,SAAhB,qCAOdC,EAAY,WAQd,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIL,UAAU,eAAd,8BACA,cAAGA,UAAU,qBAAb,+EAX2B,CACnC,CAAEE,UAAW,OACb,CAAEA,UAAW,UACb,CAAEA,UAAW,SACb,CAAEA,UAAW,SASOI,KAAI,SAACC,EAAWC,GAAZ,OACZ,SAAC,IAAD,CACIP,QAAQ,QAERC,UAAWK,EAAUL,UACrBC,SACI,SAAC,IAAD,CAASM,QAAM,EAACX,GAAE,6BAAwBS,EAAUL,WAApD,UACI,SAAC,SAAD,0EANZ,UAUI,UAAC,IAAD,CAAQE,QAAQ,UAAUJ,UAAU,OAApC,wBACgBO,EAAUL,cATrBM,EAAME,qBAkB7BC,EAAoB,WACtB,IAAMd,GACF,UAAC,IAAD,YACI,SAAC,WAAD,CAAgBE,GAAG,KAAnB,kCACA,SAAC,SAAD,6EAIR,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIC,UAAU,eAAd,oCACA,eAAGA,UAAU,qBAAb,sBACY,sCADZ,0BACsD,oCADtD,oGAIA,SAAC,IAAD,CAAgBC,QAAQ,QAAQC,UAAU,QAAQC,QAASN,EAA3D,UACI,SAAC,IAAD,CAAQO,QAAQ,UAAhB,yCAOdQ,EAAkB,WACpB,IAAMf,GACF,SAAC,IAAD,WACI,SAAC,SAAD,iCAIR,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIG,UAAU,eAAd,gCACA,eAAGA,UAAU,qBAAb,gCACsB,uCADtB,4LAGmB,oCAHnB,QAG+C,qCAH/C,oBAG0F,KACtF,6CAJJ,gCAMA,SAAC,IAAD,CAAgBE,UAAU,QAAQC,QAASN,EAA3C,UACI,iBAAMG,UAAU,iBAAhB,UACI,SAAC,IAAD,CAAQa,UAAQ,EAACC,MAAO,CAAEC,cAAe,QAAzC,uCAUlBC,EAAe,WACjB,IAAMnB,GACF,UAAC,IAAD,CAASC,GAAG,gBAAZ,WACI,SAAC,WAAD,CAAgBC,GAAG,KAAnB,wBACA,SAAC,SAAD,6EAIR,OACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,eAAIC,UAAU,eAAd,oBACA,eAAGA,UAAU,qBAAb,sBACY,sCADZ,0BACsD,oCADtD,gDAIA,SAAC,IAAD,CAAgBC,QAAS,CAAC,QAAS,SAAUC,UAAU,QAAQC,QAASN,EAAxE,UACI,SAAC,IAAD,CAAQO,QAAQ,OAAhB,qCAiCpB,UA1BiB,WACb,OACI,iCACI,SAAC,KAAD,CACIa,gBAAiB,CACb,CAAEC,MAAO,UAAWC,KAAM,gBAC1B,CAAED,MAAO,WAAYC,KAAM,eAAgBC,QAAQ,IAEvDC,MAAO,cAGX,UAAC,IAAD,YACI,UAAC,IAAD,CAAKC,GAAI,EAAT,WACI,SAAC1B,EAAD,KACA,SAACe,EAAD,KACA,SAACK,EAAD,QAEJ,UAAC,IAAD,CAAKM,GAAI,EAAT,WACI,SAACjB,EAAD,KACA,SAACO,EAAD","sources":["pages/uikit/Popovers.tsx"],"sourcesContent":["import { Row, Col, Card, Popover, Button, OverlayTrigger } from 'react-bootstrap';\nimport { PageTitle } from 'components';\nimport { PopoverDirection } from './types';\n\nconst Basic = () => {\n    const popover = (\n        <Popover id=\"popover-basic\">\n            <Popover.Header as=\"h3\">Popover right</Popover.Header>\n            <Popover.Body>And here's some amazing content. It's very engaging. Right?</Popover.Body>\n        </Popover>\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Simple Popover</h4>\n                <p className=\"text-muted font-14\">\n                    Popover is a component which displays a box with a content after a click on an element - similar to\n                    the tooltip but can contain more content.\n                </p>\n                <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\n                    <Button variant=\"danger\">Click me to see</Button>\n                </OverlayTrigger>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Direction = () => {\n    const directions: PopoverDirection[] = [\n        { placement: 'top' },\n        { placement: 'bottom' },\n        { placement: 'right' },\n        { placement: 'left' },\n    ];\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Four Directions</h4>\n                <p className=\"text-muted font-14\">Four options are available: top, right, bottom, and left aligned.</p>\n\n                {directions.map((direction, index) => (\n                    <OverlayTrigger\n                        trigger=\"click\"\n                        key={index.toString()}\n                        placement={direction.placement}\n                        overlay={\n                            <Popover popper id={`popover-positioned-${direction.placement}`}>\n                                <Popover.Body>Vivamus sagittis lacus vel augue laoreet rutrum faucibus.</Popover.Body>\n                            </Popover>\n                        }\n                    >\n                        <Button variant=\"primary\" className=\"me-1\">\n                            Popover on {direction.placement}\n                        </Button>\n                    </OverlayTrigger>\n                ))}\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DimissibleOnClick = () => {\n    const popover = (\n        <Popover>\n            <Popover.Header as=\"h3\">Dismissible popover</Popover.Header>\n            <Popover.Body>And here's some amazing content. It's very engaging. Right?</Popover.Body>\n        </Popover>\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Dismiss on Next Click</h4>\n                <p className=\"text-muted font-14\">\n                    Use the <code>trigger</code> attribute with value <code>focus</code> to dismiss popovers on the\n                    user's next click of a different element than the toggle element.\n                </p>\n                <OverlayTrigger trigger=\"focus\" placement=\"right\" overlay={popover}>\n                    <Button variant=\"success\">Dismissible popover</Button>\n                </OverlayTrigger>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DisabledPopover = () => {\n    const popover = (\n        <Popover>\n            <Popover.Body>Disabled popover</Popover.Body>\n        </Popover>\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Disabled Elements</h4>\n                <p className=\"text-muted font-14\">\n                    Elements with the <code>disabled</code> attribute aren’t interactive, meaning users cannot hover or\n                    click them to trigger a popover (or tooltip). As a workaround, you’ll want to trigger the popover\n                    from a wrapper <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code> and override the{' '}\n                    <code>pointer-events</code> on the disabled element.\n                </p>\n                <OverlayTrigger placement=\"right\" overlay={popover}>\n                    <span className=\"d-inline-block\">\n                        <Button disabled style={{ pointerEvents: 'none' }}>\n                            Disabled button\n                        </Button>\n                    </span>\n                </OverlayTrigger>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HoverPopover = () => {\n    const popover = (\n        <Popover id=\"popover-basic\">\n            <Popover.Header as=\"h3\">Ohh Wow !</Popover.Header>\n            <Popover.Body>And here's some amazing content. It's very engaging. Right?</Popover.Body>\n        </Popover>\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Hover</h4>\n                <p className=\"text-muted font-14\">\n                    Use the <code>trigger</code> attribute with value <code>hover</code> to show popover on hovering the\n                    element.\n                </p>\n                <OverlayTrigger trigger={['hover', 'focus']} placement=\"right\" overlay={popover}>\n                    <Button variant=\"dark\">Please Hover me</Button>\n                </OverlayTrigger>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Popovers = () => {\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/popovers' },\n                    { label: 'Popovers', path: '/ui/popovers', active: true },\n                ]}\n                title={'Popovers'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <Basic />\n                    <DimissibleOnClick />\n                    <HoverPopover />\n                </Col>\n                <Col xl={6}>\n                    <Direction />\n                    <DisabledPopover />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Popovers;\n"],"names":["Basic","popover","id","as","className","trigger","placement","overlay","variant","Direction","map","direction","index","popper","toString","DimissibleOnClick","DisabledPopover","disabled","style","pointerEvents","HoverPopover","breadCrumbItems","label","path","active","title","xl"],"sourceRoot":""}