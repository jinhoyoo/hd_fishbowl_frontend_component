{"version":3,"file":"static/js/7742.78af1a22.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/AccordionContext.js","../node_modules/react-bootstrap/esm/AccordionItemContext.js","../node_modules/react-bootstrap/esm/AccordionButton.js","../node_modules/react-bootstrap/esm/AccordionCollapse.js","../node_modules/react-bootstrap/esm/AccordionBody.js","../node_modules/react-bootstrap/esm/AccordionHeader.js","../node_modules/react-bootstrap/esm/AccordionItem.js","../node_modules/react-bootstrap/esm/Accordion.js","pages/uikit/Accordions.tsx"],"sourcesContent":["import * as React from 'react';\nexport function isAccordionItemSelected(activeEventKey, eventKey) {\n  return Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : activeEventKey === eventKey;\n}\nconst context = /*#__PURE__*/React.createContext({});\ncontext.displayName = 'AccordionContext';\nexport default context;","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext({\n  eventKey: ''\n});\ncontext.displayName = 'AccordionItemContext';\nexport default context;","import * as React from 'react';\nimport { useContext } from 'react';\nimport classNames from 'classnames';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport AccordionItemContext from './AccordionItemContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useAccordionButton(eventKey, onClick) {\n  const {\n    activeEventKey,\n    onSelect,\n    alwaysOpen\n  } = useContext(AccordionContext);\n  return e => {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;\n\n    if (alwaysOpen) {\n      if (Array.isArray(activeEventKey)) {\n        if (activeEventKey.includes(eventKey)) {\n          eventKeyPassed = activeEventKey.filter(k => k !== eventKey);\n        } else {\n          eventKeyPassed = [...activeEventKey, eventKey];\n        }\n      } else {\n        // activeEventKey is undefined.\n        eventKeyPassed = [eventKey];\n      }\n    }\n\n    onSelect == null ? void 0 : onSelect(eventKeyPassed, e);\n    onClick == null ? void 0 : onClick(e);\n  };\n}\nconst AccordionButton = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'button',\n  bsPrefix,\n  className,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  const accordionOnClick = useAccordionButton(eventKey, onClick);\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    onClick: accordionOnClick,\n    ...props,\n    \"aria-expanded\": eventKey === activeEventKey,\n    className: classNames(className, bsPrefix, !isAccordionItemSelected(activeEventKey, eventKey) && 'collapsed')\n  });\n});\nAccordionButton.displayName = 'AccordionButton';\nexport default AccordionButton;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Collapse from './Collapse';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionCollapse = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  children,\n  eventKey,\n  ...props\n}, ref) => {\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-collapse');\n  return /*#__PURE__*/_jsx(Collapse, {\n    ref: ref,\n    in: isAccordionItemSelected(activeEventKey, eventKey),\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(Component, {\n      children: React.Children.only(children)\n    })\n  });\n});\nAccordionCollapse.displayName = 'AccordionCollapse';\nexport default AccordionCollapse;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionBody = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-body');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  return /*#__PURE__*/_jsx(AccordionCollapse, {\n    eventKey: eventKey,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionBody.displayName = 'AccordionBody';\nexport default AccordionBody;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionButton from './AccordionButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionHeader = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'h2',\n  bsPrefix,\n  className,\n  children,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-header');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(AccordionButton, {\n      onClick: onClick,\n      children: children\n    })\n  });\n});\nAccordionHeader.displayName = 'AccordionHeader';\nexport default AccordionHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionItem = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  eventKey,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-item');\n  const contextValue = useMemo(() => ({\n    eventKey\n  }), [eventKey]);\n  return /*#__PURE__*/_jsx(AccordionItemContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionItem.displayName = 'AccordionItem';\nexport default AccordionItem;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionBody from './AccordionBody';\nimport AccordionButton from './AccordionButton';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionContext from './AccordionContext';\nimport AccordionHeader from './AccordionHeader';\nimport AccordionItem from './AccordionItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Accordion = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    activeKey,\n    bsPrefix,\n    className,\n    onSelect,\n    flush,\n    alwaysOpen,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'accordion');\n  const contextValue = useMemo(() => ({\n    activeEventKey: activeKey,\n    onSelect,\n    alwaysOpen\n  }), [activeKey, onSelect, alwaysOpen]);\n  return /*#__PURE__*/_jsx(AccordionContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...controlledProps,\n      className: classNames(className, prefix, flush && `${prefix}-flush`)\n    })\n  });\n});\nAccordion.displayName = 'Accordion';\nexport default Object.assign(Accordion, {\n  Button: AccordionButton,\n  Collapse: AccordionCollapse,\n  Item: AccordionItem,\n  Header: AccordionHeader,\n  Body: AccordionBody\n});","import React, { useContext } from 'react';\nimport { Row, Col, Card, Accordion, Button, Collapse, useAccordionButton, AccordionContext } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { useToggle } from 'hooks';\nimport { PageTitle } from 'components';\n\ntype AccordionItem = {\n    id: number;\n    title: string;\n    text: string;\n};\n\ntype CustomAccordion1Props = {\n    item: string;\n    index: number;\n};\n\ntype CustomAccordion2Props = {\n    item: AccordionItem;\n    index: number;\n};\n\ntype CustomToggleProps = {\n    children: React.ReactNode;\n    eventKey: string;\n    containerClass: string;\n    linkClass: string;\n    callback?: (eventKey: string) => void;\n};\n\nconst CustomToggle = ({ children, eventKey, containerClass, linkClass, callback }: CustomToggleProps) => {\n    const { activeEventKey } = useContext(AccordionContext);\n\n    const decoratedOnClick = useAccordionButton(eventKey, () => callback && callback(eventKey));\n\n    const isCurrentEventKey = activeEventKey === eventKey;\n\n    return (\n        <h5 className={containerClass}>\n            <Link\n                to=\"#\"\n                className={classNames(linkClass, {\n                    collapsed: !isCurrentEventKey,\n                })}\n                onClick={decoratedOnClick}\n            >\n                {children}\n            </Link>\n        </h5>\n    );\n};\n\nconst CustomAccordion1 = ({ item, index }: CustomAccordion1Props) => {\n    return (\n        <Card className=\"mb-0\">\n            <Card.Header>\n                <CustomToggle\n                    eventKey={String(index)}\n                    containerClass=\"m-0\"\n                    linkClass=\"custom-accordion-title d-block pt-2 pb-2\"\n                >\n                    Collapsible Group Item #{item}\n                </CustomToggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey={String(index)}>\n                <div>\n                    <Card.Body>\n                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid.\n                        3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt\n                        laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin\n                        coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes\n                        anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings\n                        occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven't heard\n                        of them accusamus labore sustainable VHS.\n                    </Card.Body>\n                </div>\n            </Accordion.Collapse>\n        </Card>\n    );\n};\n\nconst CustomAccordion2 = ({ item, index }: CustomAccordion2Props) => {\n    return (\n        <Card className=\"mb-0\">\n            <Card.Header>\n                <CustomToggle\n                    eventKey={String(index)}\n                    containerClass=\"m-0\"\n                    linkClass=\"custom-accordion-title d-block py-1\"\n                >\n                    Q. {item.title}\n                    <i className=\"mdi mdi-chevron-down accordion-arrow\"></i>\n                </CustomToggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey={String(index)}>\n                <div>\n                    <Card.Body>{item.text}</Card.Body>\n                </div>\n            </Accordion.Collapse>\n        </Card>\n    );\n};\n\nconst Accordions = () => {\n    const accordianContent: AccordionItem[] = [\n        {\n            id: 1,\n            title: 'Can I use this template for my client?',\n            text: ' Yup, the marketplace license allows you to use this theme in any end products. For more information on licenses, please refere',\n        },\n        {\n            id: 2,\n            title: 'Can this theme work with Wordpress?',\n            text: \"No. This is a HTML template. It won't directly with wordpress, though you can convert this into wordpress compatible theme\",\n        },\n        {\n            id: 3,\n            title: 'How do I get help with the theme?',\n            text: '   Use our dedicated support email (support@coderthemes.com) to send your issues or feedback. We are here to help anytime',\n        },\n        {\n            id: 4,\n            title: 'Will you regularly give updates of UBold ?',\n            text: 'Yes, We will update the UBold regularly. All the future updates would be available without any cost',\n        },\n    ];\n    const [isOpen, toggle] = useToggle(true);\n    const [isOpenFirst, toggleFirst] = useToggle(true);\n    const [isOpenSecond, toggleSecond] = useToggle(true);\n    const [isOpenHorizontal, toggleHorizontal] = useToggle(true);\n\n    const toggleBoth = () => {\n        toggleFirst();\n        toggleSecond();\n    };\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Base UI', path: '/ui/accordions' },\n                    { label: 'Accordions', path: '/ui/accordions', active: true },\n                ]}\n                title={'Accordions'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Simple Accordions</h4>\n                            <p className=\"text-muted font-14 mb-3\">\n                                Use <code>Collapse</code> component to create accordions. The details documentation is\n                                available{' '}\n                                <Link\n                                    rel=\"noreferrer\"\n                                    to={{ pathname: 'https://react-bootstrap-v5.netlify.app/utilities/transitions/' }}\n                                    target=\"_blank\"\n                                >\n                                    here\n                                </Link>\n                                .\n                            </p>\n\n                            <Accordion defaultActiveKey=\"0\" id=\"accordion\" className=\"mb-3\">\n                                {(['1', '2', '3'] || []).map((item, index) => {\n                                    return <CustomAccordion1 key={index.toString()} item={item} index={index} />;\n                                })}\n                            </Accordion>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Custom Accordions</h4>\n                            <p className=\"text-muted font-14 mb-3\">\n                                You can have custom look and feel for accorion as well. Just use class{' '}\n                                <code>.custom-accordion</code> along with\n                                <code>.accordion</code> as a wrapper.\n                            </p>\n\n                            <Accordion defaultActiveKey=\"0\" id=\"accordion\" className=\"custom-accordion\">\n                                {(accordianContent || []).map((item, index) => {\n                                    return <CustomAccordion2 key={index.toString()} item={item} index={index} />;\n                                })}\n                            </Accordion>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Collapse</h4>\n                            <p className=\"text-muted font-14 mb-3\">\n                                Collapse provides the way to toggle the visibility of any content or element.\n                            </p>\n                            <p>\n                                <Link to=\"#\" className=\"btn btn-primary\" onClick={toggle}>\n                                    Link with href\n                                </Link>\n\n                                <Button color=\"primary\" className=\"ms-1\" type=\"button\" onClick={toggle}>\n                                    Button with data-target\n                                </Button>\n                            </p>\n                            <Collapse in={isOpen}>\n                                <div>\n                                    <div className=\"card card-body mb-0\">\n                                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry\n                                        richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes\n                                        anderson cred nesciunt sapiente ea proident.\n                                    </div>\n                                </div>\n                            </Collapse>\n                        </Card.Body>\n                    </Card>\n                </Col>\n\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">Multiple Targets</h4>\n                            <p className=\"text-muted font-14 mb-3\">\n                                Multiple <code>Button</code> or <code>Link</code> can show and hide an element.\n                            </p>\n                            <p>\n                                <Link to=\"#\" className=\"btn btn-primary\" onClick={toggleFirst}>\n                                    Toggle first element\n                                </Link>\n\n                                <Button variant=\"primary\" className=\"ms-1\" type=\"button\" onClick={toggleSecond}>\n                                    Toggle second element\n                                </Button>\n\n                                <Button variant=\"primary\" className=\"ms-1\" type=\"button\" onClick={toggleBoth}>\n                                    Toggle both elements\n                                </Button>\n                            </p>\n                            <Row>\n                                <Col>\n                                    <Collapse in={isOpenFirst}>\n                                        <div>\n                                            <div className=\"card card-body mb-0\">\n                                                Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus\n                                                terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer\n                                                labore wes anderson cred nesciunt sapiente ea proident.\n                                            </div>\n                                        </div>\n                                    </Collapse>\n                                </Col>\n                                <Col>\n                                    <Collapse in={isOpenSecond}>\n                                        <div>\n                                            <div className=\"card card-body mb-0\">\n                                                Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus\n                                                terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer\n                                                labore wes anderson cred nesciunt sapiente ea proident.\n                                            </div>\n                                        </div>\n                                    </Collapse>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col xl={6}>\n                    <Card>\n                        <Card.Body>\n                            <h4 className=\"header-title\">COLLAPSE HORIZONTAL</h4>\n                            <p className=\"text-muted font-14 mb-3\">\n                                Add a collapse toggle animation to an element or component to transition the width\n                                instead of height.\n                            </p>\n                            <Button color=\"primary\" className=\"ms-1\" type=\"button\" onClick={toggleHorizontal}>\n                                Toggle Width Collapse\n                            </Button>\n\n                            <div style={{ minHeight: '120px' }}>\n                                <Collapse in={isOpenHorizontal} dimension=\"width\">\n                                    <div id=\"example-collapse-text\">\n                                        <Card body style={{ width: '300px' }}>\n                                            This is some placeholder content for a horizontal collapse. It's hidden by\n                                            default and shown when triggered.\n                                        </Card>\n                                    </div>\n                                </Collapse>\n                            </div>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Accordions;\n"],"names":["isAccordionItemSelected","activeEventKey","eventKey","Array","isArray","includes","context","React","displayName","useAccordionButton","onClick","useContext","AccordionContext","onSelect","alwaysOpen","e","eventKeyPassed","filter","k","AccordionButton","ref","as","Component","bsPrefix","className","props","useBootstrapPrefix","AccordionItemContext","accordionOnClick","type","_jsx","classNames","AccordionCollapse","children","Collapse","in","AccordionBody","AccordionHeader","AccordionItem","contextValue","useMemo","Provider","value","Accordion","useUncontrolled","activeKey","flush","controlledProps","prefix","Object","assign","Button","Item","Header","Body","CustomToggle","containerClass","linkClass","callback","decoratedOnClick","isCurrentEventKey","to","collapsed","CustomAccordion1","item","index","Card","String","CustomAccordion2","title","text","useToggle","isOpen","toggle","isOpenFirst","toggleFirst","isOpenSecond","toggleSecond","isOpenHorizontal","toggleHorizontal","breadCrumbItems","label","path","active","Row","Col","xl","rel","pathname","target","defaultActiveKey","id","map","toString","color","variant","style","minHeight","dimension","body","width"],"sourceRoot":""}